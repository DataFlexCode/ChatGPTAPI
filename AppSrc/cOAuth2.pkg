// Class: cOAuth2
//
// The server-side aspect of the OAuth 2.0 class
//
// Includes a class and object (c/oStructHandler_tGrantToken) generated by
// Sture's VDF XRay to handle turning a received JSON grant into a VDF struct
// variable that we can work with. NOTE: No longer the case in v1.1.
//
// Revision:
//      2022/06/05  (MJP, UIG)
//          Version 1.1
//          Improved JavaScript side to make it a more compliant framework component.
//          Added Logout and RefreshToken methods
//          Replace Sture's JSON handling with cJsonObject - makes it all nicer!
//          Tidied up overall.
//
//      2015/07/15  (MJP, UIG) 
//          Initial version: 1.0
//

Use cWebObject.pkg
Use cHttpTransferREST.pkg

Struct stOAuthParam
    String sParam
    String sValue
End_Struct

Struct stGrantToken
    String  expires_in
    String  token_type
    String  scope
    String  expires_on
    String  not_before
    String  resource
    String  access_token
    String  refresh_token
    String  id_token
    String  ext_expires_on
End_Struct

Class cOAuth2 is a cWebObject
    
    Procedure Construct_Object
        Forward Send Construct_Object

        // Client Web Properties        
        { WebProperty=Client }
        Property Boolean wpbLoggedIn        False
        { WebProperty=Client }
        Property String  wpsOAuth2Url       ""
        { WebProperty=Client }
        Property String  wpsOAuth2LogoutUrl
        { WebProperty=Client }
        Property String  wpsClientIDName    "client_id"
        { WebProperty=Client }
        Property String  wpsClientID        ""
        { WebProperty=Client }
        Property String  wpsRedirUrlName    "redirect_uri"
        { WebProperty=Client }
        Property String  wpsRedirectUrl     ""
        { WebProperty=Client }
        Property String  wpsLogoutRedirName "post_logout_redirect_uri"
        { WebProperty=Client }
        Property String  wpsRespTypeName    "response_type"
        { WebProperty=Client }
        Property String  wpsResponseType    "token"
        { WebProperty=Client }
        Property String  wpsStateName       "state"
        { WebProperty=Client }
        Property Integer wpiPollInterval    500
        { WebProperty=Client }
        Property String  wpsErrorCode       ""
        { WebProperty=Client }
        Property String  wpsErrorDesc       ""
        { WebProperty=Client }
        Property String  wpsAuthCode        ""
        { WebProperty=Client }
        Property Integer wpiExpiresIn       0
        { WebProperty=Client }
        Property String  wpsRedirectedTo    ""
        { WebProperty=Client }
        Property String  wpsAccessToken     ""
        { WebProperty=Client }
        Property String  wpsAuthCdName      "code"
        { WebProperty=Client }
        Property String  wpsExpiresName     "expires_in"
        { WebProperty=Client }
        Property String  wpsRetStateName    "state"
        { WebProperty=Client }
        Property String  wpsErrCodeName     "error"
        { WebProperty=Client }
        Property String  wpsErrDescName     "error_description"
        { WebProperty=Client }
        Property stOAuthParam[] wpatParams
        
        // Server Web Properties
        { WebProperty=Server }
        Property stGrantToken wptGrant
        { WebProperty=Server }
        Property String   wpsGrantDetail     ""
        { WebProperty=Server }
        Property DateTime wpdtGrantReceived

        // Ordinary properties
        Property String   psClientSecret     ""    // This need not be exposed in the client... is this always true???
        Property String   psTokenHost        ""
        Property String   psTokenPath        ""
        Property Boolean  pbAutoLogin        False
        Property Boolean  pbUseGrantAsAT     False
        Property Boolean  pbValidateToken    False
        Property Boolean  pbValidateCode     False
        Property String   psValidateHost     ""
        Property String   psValidatePath     ""
        Property Boolean  pbUrlDecodeCode    False
        Property Boolean  pbUrlEncodeReDir   False
        Property String   psGrantDetail      ""
                
        // Settings
        Set psJSClass to "dfcc.OAuth2"
        
        WebPublishProcedure LoginDone
        WebPublishProcedure LoginFail
        WebPublishProcedure LogoutDone
        
        Object oHttp is a cHttpTransferREST
        End_Object
        
    End_Procedure
    
    Procedure AddParam String sParam String sValue
        stOAuthParam[] tParams
        stOAuthParam   tParam
        Integer i
        
        WebGet wpatParams           to tParams
        Move sParam to tParam.sParam
        
        Move (SearchArray(tParam, tParams)) to i
        
        If (i = -1) Begin
            Move (SizeOfArray(tParams)) to i
            Move sParam                 to tParams[i].sParam
        End

        Move sValue to tParams[i].sValue
        WebSet wpatParams           to tParams
    End_Procedure
    
    Procedure ClearParams
        stOAuthParam[] tEmpty
        
        WebSet wpatParams to tEmpty
    End_Procedure
    
    Procedure OnBeforeLogin
    End_Procedure
    
    Procedure Login
        Send OnBeforeLogin
        Send ClientAction "login"
    End_Procedure
    
    Procedure Logout
        Send ClientAction "logout"
    End_Procedure
    
    Procedure OnLoad
        Forward Send OnLoad
        
        If (pbAutoLogin(Self)) Begin
            Send Login
        End
        
    End_Procedure
    
    Function GrantLeft Returns Integer
        DateTime dtNow dtReceived
        Integer  iExpires iPassed iLeft
        TimeSpan tsPassed
        String   sDT
        
        Move (CurrentDateTime())            to dtNow
        WebGet wpdtGrantReceived            to dtReceived
        Move (dtNow - dtReceived)           to tsPassed
        Move (SpanTotalSeconds(tsPassed))   to iPassed
        WebGet wpiExpiresIn                 to iExpires
        Function_Return (iExpires - iPassed)
    End_Function
    
    // These two events (OnLogin and OnLoginFail) are designed for overriding in
    // the developer's own code - there is no need to Forward Send them.
    Procedure OnLogin
    End_Procedure

    Procedure OnLoginFail
    End_Procedure

    Procedure LoginDone
        String         sCode sToken sID sReDir sSecret sPath sBody sResp sHost sScope
        Integer        iOK i iMax iPos iStat iIdx
        Boolean        bOK
        Handle         hoJson
        UChar[]        ucaResp
        stGrantToken   tResp
        stOAuthParam[] atParams
        stOAuthParam   tParam
        
        WebSet wpsErrorCode to ""
        WebSet wpsErrorDesc to ""
        
        WebGet wpsAuthCode to sCode
        
        If (sCode = "") Begin  // We don't HAVE an auth code - return blank
            WebSet wpsErrorCode to "NO-CODE"
            WebSet wpsErrorDesc to "No code returned from call to OAuth 2.0 end-point"
            WebSet wpbLoggedIn  to False
            Send OnLoginFail
            Procedure_Return
        End
        
        Get wpsClientID     to sID
        Get wpsRedirectUrl  to sReDir
        Get psClientSecret  to sSecret
        Get psTokenPath     to sPath
        Get psTokenHost     to sHost
        
        Send Reset          of oHttp
        Set psRemoteHost    of oHTTP    to sHost
            
        Get AddHeader   of oHttp "Content-type" "application/x-www-form-urlencoded" to iOK
        
        WebGet wpatParams to atParams
        Move "scope" to tParam.sParam        
        Move (SearchArray(tParam, atParams)) to iIdx        
        If (iIdx <> -1) ;
            Move atParams[iIdx].sValue to sScope
            
        Move (             "client_id=" + sID)              to sBody
        If (sScope <> "") ;
            Move (sBody + "&scope=" + sScope)               to sBody
        Move (sBody +     "&code=" + sCode)                 to sBody
        Move (sBody +     "&redirect_uri=" + sReDir)        to sBody
        Move (sBody +     "&grant_type=authorization_code") to sBody
        Move (sBody +     "&client_secret=" + sSecret)      to sBody
                
        Get HttpVerbAddrRequest of oHttp sPath (AddressOf(sBody)) (Length(sBody)) False "POST" to iOK

        If iOK Begin
            Get ResponseStatusCode of oHttp to iStat
            
            If ((iStat >= 200) and (iStat < 300)) Begin
                Get pucaData of oHttp to ucaResp
                Get Create (RefClass(cJsonObject)) to hoJson
                Set pbRequireAllMembers of hoJson to False
                Get ParseUtf8 of hoJson ucaResp to bOK
                
                If bOK Begin
                
                    If (HasMember(hoJson, "error")) Begin
                        WebSet wpsErrorCode to (MemberValue(hoJson, "error"))
                        If (HasMember(hoJson, "error_description")) ;
                            WebSet wpsErrDescName to (MemberValue(hoJson, "error_description"))
                            WebSet wpbLoggedIn     to False
                        Send OnLoginFail
                    End
                    Else Begin
                        Get JsonToDataType of hoJson    to tResp
                        Move tResp.access_token         to sToken
                        WebSet wpsAccessToken           to tResp.access_token
                        WebSet wptGrant                 to tResp
                        WebSet wpiExpiresIn             to (Integer(tResp.expires_in))
                        WebSet wpdtGrantReceived        to (CurrentDateTime())
                        Set peWhiteSpace of hoJson      to jpWhitespace_Pretty
                        WebSet wpsGrantDetail           to (Stringify(hoJson))
                        WebSet wpbLoggedIn              to True
                        Send OnLogin
                    End
                    
                End
                Else Begin
                    Get psData of oHttp to sResp
                    WebSet wpsErrorCode to "JSON-PARSEFAIL"
                    WebSet wpsErrorDesc to sResp
                    WebSet wpbLoggedIn  to False
                    Send OnLoginFail
                End
                
                Send Destroy of hoJson
            End
            Else Begin
                WebSet wpsErrorCode to "GRANT-HTTPFAIL"
                WebSet wpsErrorDesc to ("HTTP Error" * String(iStat) * "in response to request for access token grant")
                WebSet wpbLoggedIn  to False
                Send OnLoginFail
            End
            
        End
        Else Begin
            WebSet wpsErrorCode to "GRANT-HTTPFAIL"
            WebSet wpsErrorDesc to ("No response from HTTP call to grant token endpoint https://" + psTokenHost(Self) + "/" + sPath)
            WebSet wpbLoggedIn  to False
            Send OnLoginFail
        End
        
    End_Procedure
    
    Procedure RefreshToken
        String         sBody sID sToken sReDir sSecret sResp sPath sHost sScope
        Integer        iOK iStat iIdx
        Boolean        bOK
        Handle         hoJson
        UChar[]        ucaResp
        stGrantToken   tGrant tResp
        stOAuthParam[] atParams
        stOAuthParam   tParam
        
        WebSet wpsErrorCode to ""
        WebSet wpsErrorDesc to ""
        
        WebGet wptGrant             to tGrant
        Move tGrant.refresh_token   to sToken
        
        If (sToken = "") Begin
            WebSet wpsErrorCode to "NO-REFRESH"
            WebSet wpsErrorDesc to "Current grant does not contain a refresh token"
            WebSet wpbLoggedIn  to False
            Send OnLoginFail
            Procedure_Return
        End
        
        WebGet wpsClientID      to sID
        WebGet wpsRedirectUrl   to sReDir
        Get    psClientSecret   to sSecret
        Get    psTokenPath      to sPath
        Get    psTokenHost      to sHost
        
        WebGet wpatParams to atParams
        Move "scope" to tParam.sParam        
        Move (SearchArray(tParam, atParams)) to iIdx        
        If (iIdx <> -1) ;
            Move atParams[iIdx].sValue to sScope
            
        Move (             "client_id=" + sID)          to sBody
        Move (sBody +     "&grant_type=refresh_token")  to sBody
        If (sScope <> "") ;
            Move (sBody + "&scope=" + sScope)           to sBody
        Move (sBody +     "&refresh_token=" + sToken)   to sBody
        Move (sBody +     "&redirect_uri=" + sReDir)    to sBody
        Move (sBody +     "&client_secret=" + sSecret)  to sBody
        
        Send Reset          of oHttp
        Set psRemoteHost    of oHTTP to sHost
        Get AddHeader       of oHttp "Content-type" "application/x-www-form-urlencoded" to iOK
        
        Get HttpVerbAddrRequest of oHttp sPath (AddressOf(sBody)) (Length(sBody)) False "POST" to iOK

        If iOK Begin
            Get ResponseStatusCode of oHttp to iStat
            
            If ((iStat >= 200) and (iStat < 300)) Begin
                Get pucaData of oHttp to ucaResp
                Get Create (RefClass(cJsonObject)) to hoJson
                Set pbRequireAllMembers of hoJson to False
                Get ParseUtf8 of hoJson ucaResp to bOK
                
                If bOK Begin
                
                    If (HasMember(hoJson, "error")) Begin
                        WebSet wpsErrorCode to (MemberValue(hoJson, "error"))
                        If (HasMember(hoJson, "error_description")) ;
                            WebSet wpsErrDescName to (MemberValue(hoJson, "error_description"))
                        WebSet wpbLoggedIn    to False
                        Send OnLoginFail
                    End
                    Else Begin
                        Get JsonToDataType of hoJson    to tResp
                        Move tResp.access_token         to sToken
                        WebSet wpsAccessToken           to tResp.access_token
                        WebSet wptGrant                 to tResp
                        WebSet wpiExpiresIn             to (Integer(tResp.expires_in))
                        WebSet wpdtGrantReceived        to (CurrentDateTime())
                        Set peWhiteSpace of hoJson      to jpWhitespace_Pretty
                        WebSet wpsGrantDetail           to (Stringify(hoJson))
                        WebSet wpbLoggedIn              to True
                        Send OnLogin
                    End
                    
                End
                Else Begin
                    Get psData of oHttp to sResp
                    WebSet wpsErrorCode to "JSON-PARSEFAIL"
                    WebSet wpsErrorDesc to sResp
                    WebSet wpbLoggedIn  to False
                    Send OnLoginFail
                End
                
                Send Destroy of hoJson
            End
            Else Begin
                WebSet wpsErrorCode to "GRANT-HTTPFAIL"
                WebSet wpsErrorDesc to ("HTTP Error" * String(iStat) * "in response to request for refresh token grant")
                WebSet wpbLoggedIn  to False
                Send OnLoginFail
            End
            
        End
        Else Begin
            WebSet wpsErrorCode to "GRANT-HTTPFAIL"
            WebSet wpsErrorDesc to ("No response from HTTP call to refresh token endpoint https://" + psTokenHost(Self) + "/" + sPath)
            WebSet wpbLoggedIn  to False
            Send OnLoginFail
        End
        
    End_Procedure
    
    Procedure LoginFail
        Set wpbLoggedIn to False
        Send OnLoginFail
    End_Procedure
    
    Procedure OnLogout
    End_Procedure
    
    Procedure LogoutDone
        stGrantToken   tGrant
        
        Set psGrantDetail      to ""
        WebSet wpsAuthCode     to ""
        WebSet wpsAccessToken  to ""
        WebSet wptGrant        to tGrant
        WebSet wpiExpiresIn    to 0
        WebSet wpbLoggedIn     to False
        Send OnLogout
    End_Procedure
    
End_Class
