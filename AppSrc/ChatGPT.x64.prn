Compiling Program: C:\Projects\ChatGPTAPI\AppSrc\ChatGPT.src
Memory Available: 11550187520
1>Use DFAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.x64.pkd    (C:\Program Files\DataFlex 23.0\Pkg\dfallent.x64.pkd)
73406>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJStandardCommandBarSystem.pkg)
73406>>>// these are all the packages used in a standard MDI menubar/toolbar system
73406>>>
73406>>>Use cCJCommandBarSystem.pkg
73406>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJStandardMenuItemClasses.pkg)
73406>>>>>Use Dfpanel.pkg
73406>>>>>Use cCJCommandBarSystem.pkg
73406>>>>>Use LanguageText.pkg
73406>>>>>
73406>>>>>
73406>>>>>Class cCJUndoMenuItem is a cCJMenuItem
73407>>>>>    
73407>>>>>    Procedure Construct_Object
73409>>>>>        Forward Send Construct_Object
73411>>>>>        Set psCaption   to C_$CaptionUndo
73412>>>>>        Set psToolTip to C_$ToolTipUndo
73413>>>>>        Set psDescription to C_$DescUndo
73414>>>>>        Set psImage to "ActionUndo.ico"
73415>>>>>        Set pbActiveUpdate to True
73416>>>>>        Set psCategory to C_$CategoryEdit
73417>>>>>        Set psShortcut to C_$Key_Ctrl_Z
73418>>>>>    End_Procedure
73419>>>>>    
73419>>>>>    Procedure OnExecute Variant vCommandBarControl
73421>>>>>        Send Undo of (focus(Self))
73422>>>>>    End_Procedure
73423>>>>>    
73423>>>>>    Function IsEnabled Returns Boolean
73425>>>>>        Boolean bEnabled
73425>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
73426>>>>>        Function_Return bEnabled
73427>>>>>    End_Function
73428>>>>>    
73428>>>>>End_Class
73429>>>>>
73429>>>>>
73429>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
73430>>>>>    
73430>>>>>    Procedure Construct_Object
73432>>>>>        Forward Send Construct_Object
73434>>>>>        Set psCaption   to C_$CaptionDelete
73435>>>>>        Set psToolTip to C_$ToolTipDelete
73436>>>>>        Set psDescription to C_$DescDelete
73437>>>>>        Set psImage to "actionDelete.ico"
73438>>>>>        Set psShortcut to C_$Key_Delete
73439>>>>>        Set pbActiveUpdate to True
73440>>>>>        Set psCategory to C_$CategoryEdit
73441>>>>>    End_Procedure
73442>>>>>    
73442>>>>>    
73442>>>>>    Procedure OnExecute Variant vCommandBarControl
73444>>>>>        Send Delete of (focus(Self))
73445>>>>>    End_Procedure
73446>>>>>    
73446>>>>>    Function IsEnabled Returns Boolean
73448>>>>>        Boolean bEnabled
73448>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
73449>>>>>        Function_Return bEnabled
73450>>>>>    End_Function
73451>>>>>    
73451>>>>>End_Class
73452>>>>>
73452>>>>>
73452>>>>>Class cCJCutMenuItem is a cCJMenuItem
73453>>>>>    
73453>>>>>    Procedure Construct_Object
73455>>>>>        Forward Send Construct_Object
73457>>>>>        Set psCaption   to C_$CaptionCut
73458>>>>>        Set psToolTip to C_$TooltipCut
73459>>>>>        Set psDescription to C_$DescCut
73460>>>>>        Set psImage to "actionCut.ico"
73461>>>>>        Set psShortcut to C_$Key_Ctrl_X
73462>>>>>        Set pbActiveUpdate to True
73463>>>>>        Set psCategory to C_$CategoryEdit
73464>>>>>    End_Procedure
73465>>>>>    
73465>>>>>    
73465>>>>>    Procedure OnExecute Variant vCommandBarControl
73467>>>>>        Send Cut of (focus(Self))
73468>>>>>    End_Procedure
73469>>>>>    
73469>>>>>    Function IsEnabled Returns Boolean
73471>>>>>        Boolean bEnabled
73471>>>>>        Get CanCut of (Focus(Self)) to bEnabled
73472>>>>>        Function_Return bEnabled
73473>>>>>    End_Function
73474>>>>>    
73474>>>>>End_Class
73475>>>>>
73475>>>>>
73475>>>>>Class cCJCopyMenuItem is a cCJMenuItem
73476>>>>>    
73476>>>>>    Procedure Construct_Object
73478>>>>>        Forward Send Construct_Object
73480>>>>>        Set psCaption   to C_$CaptionCopy
73481>>>>>        Set psToolTip to C_$ToolTipCopy
73482>>>>>        Set psDescription to C_$DescCopy
73483>>>>>        Set psImage to "actionCopy.ico"
73484>>>>>        Set psShortcut to C_$Key_Ctrl_C
73485>>>>>        Set pbActiveUpdate to True
73486>>>>>        Set psCategory to C_$CategoryEdit
73487>>>>>    End_Procedure
73488>>>>>    
73488>>>>>    
73488>>>>>    Procedure OnExecute Variant vCommandBarControl
73490>>>>>        Send Copy of (focus(Self))
73491>>>>>    End_Procedure
73492>>>>>    
73492>>>>>    Function IsEnabled Returns Boolean
73494>>>>>        Boolean bEnabled
73494>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
73495>>>>>        Function_Return bEnabled
73496>>>>>    End_Function
73497>>>>>    
73497>>>>>End_Class
73498>>>>>
73498>>>>>
73498>>>>>Class cCJPasteMenuItem is a cCJMenuItem
73499>>>>>    
73499>>>>>    Procedure Construct_Object
73501>>>>>        Forward Send Construct_Object
73503>>>>>        Set psCaption   to C_$CaptionPaste
73504>>>>>        Set psToolTip to C_$ToolTipPaste
73505>>>>>        Set psDescription to C_$DescPaste
73506>>>>>        Set psImage to "actionPaste.ico"
73507>>>>>        Set pbActiveUpdate to True
73508>>>>>        Set psShortcut to C_$Key_Ctrl_V
73509>>>>>        Set psCategory to C_$CategoryEdit
73510>>>>>    End_Procedure
73511>>>>>    
73511>>>>>    
73511>>>>>    Procedure OnExecute Variant vCommandBarControl
73513>>>>>        Send Paste of (focus(Self))
73514>>>>>    End_Procedure
73515>>>>>    
73515>>>>>    Function IsEnabled Returns Boolean
73517>>>>>        Boolean bEnabled
73517>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
73518>>>>>        Function_Return bEnabled
73519>>>>>    End_Function
73520>>>>>    
73520>>>>>End_Class
73521>>>>>
73521>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
73522>>>>>    
73522>>>>>    Procedure Construct_Object
73524>>>>>        Forward Send Construct_Object
73526>>>>>        Set psCaption   to C_$CaptionSelectAll
73527>>>>>        Set psToolTip to C_$ToolTipSelectAll
73528>>>>>        Set psDescription to C_$DescSelectAll
73529>>>>>        Set pbActiveUpdate to True
73530>>>>>        Set psShortcut to C_$Key_Ctrl_A
73531>>>>>        Set psCategory to C_$CategoryEdit
73532>>>>>    End_Procedure
73533>>>>>    
73533>>>>>    
73533>>>>>    Procedure OnExecute Variant vCommandBarControl
73535>>>>>        Send Select_All of (focus(Self))
73536>>>>>    End_Procedure
73537>>>>>    
73537>>>>>    Function IsEnabled Returns Boolean
73539>>>>>        Boolean bEnabled
73539>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
73540>>>>>        Function_Return bEnabled
73541>>>>>    End_Function
73542>>>>>    
73542>>>>>End_Class
73543>>>>>
73543>>>>>
73543>>>>>Class cCJExitMenuItem is a cCJMenuItem
73544>>>>>    
73544>>>>>    Procedure Construct_Object
73546>>>>>        Forward Send Construct_Object
73548>>>>>        Set psCaption to C_$CaptionExit
73549>>>>>        Set psToolTip to C_$ToolTipExit
73550>>>>>        Set psDescription to C_$ToolTipExit
73551>>>>>        Set psShortcut to C_$Key_Alt_F4
73552>>>>>        Set psCategory to C_$CategoryFile
73553>>>>>    End_Procedure
73554>>>>>    
73554>>>>>    Procedure OnExecute Variant vCommandBarControl
73556>>>>>        Send Exit_Application of Desktop
73557>>>>>    End_Procedure
73558>>>>>    
73558>>>>>End_Class
73559>>>>>
73559>>>>>Class cCJHelpMenuItem is a cCJMenuItem
73560>>>>>    
73560>>>>>    Procedure Construct_Object
73562>>>>>        Forward Send Construct_Object
73564>>>>>        Set psCaption to C_$CaptionHelp
73565>>>>>        Set psDescription to C_$ToolTipHelp
73566>>>>>        Set psToolTip to C_$DescHelp
73567>>>>>        Set psImage to "ActionHelp.ico"
73568>>>>>        Set psShortcut to "F1"
73569>>>>>        Set psCategory to C_$CategoryHelp
73570>>>>>    End_Procedure
73571>>>>>    
73571>>>>>    Procedure OnExecute Variant vCommandBarControl
73573>>>>>        Send Help of (Focus(Self))
73574>>>>>    End_Procedure
73575>>>>>    
73575>>>>>End_Class
73576>>>>>
73576>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
73577>>>>>    
73577>>>>>    Procedure Construct_Object
73579>>>>>        Forward Send Construct_Object
73581>>>>>        Set psCaption to C_$CaptionAddStatusbar
73582>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
73583>>>>>        Set psDescription to  C_$DescAddStatusbar
73584>>>>>        Set psCategory to C_$CategoryWindow
73585>>>>>    End_Procedure
73586>>>>>    
73586>>>>>    Procedure OnExecute Variant vCommandBarControl
73588>>>>>        Handle hoCommandBars hoClientArea
73588>>>>>        Get CommandBarSystemObject to hoCommandBars
73589>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73590>>>>>        If hoClientArea Begin
73592>>>>>            // the clientarea's parent panel has message
73592>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
73593>>>>>        End
73593>>>>>>
73593>>>>>    End_Procedure
73594>>>>>    
73594>>>>>    Function IsChecked Returns Boolean
73596>>>>>        Boolean bOn
73596>>>>>        Handle hoCommandBars hoClientArea
73596>>>>>        Get CommandBarSystemObject to hoCommandBars
73597>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73598>>>>>        If hoClientArea Begin
73600>>>>>            // the clientarea's parent panel has message
73600>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
73601>>>>>        End
73601>>>>>>
73601>>>>>        Function_Return bOn
73602>>>>>    End_Function
73603>>>>>End_Class
73604>>>>>
73604>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
73605>>>>>    
73605>>>>>    Procedure Construct_Object
73607>>>>>        Forward Send Construct_Object
73609>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
73610>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
73611>>>>>        Set psDescription to C_$DescAutoArrangeIcons
73612>>>>>        Set psCategory to C_$CategoryWindow
73613>>>>>    End_Procedure
73614>>>>>    
73614>>>>>    Procedure OnExecute Variant vCommandBarControl
73616>>>>>        Handle hoCommandBars hoClientArea
73616>>>>>        Get CommandBarSystemObject to hoCommandBars
73617>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73618>>>>>        If hoClientArea Begin
73620>>>>>            // the clientarea's parent panel has message
73620>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
73621>>>>>        End
73621>>>>>>
73621>>>>>    End_Procedure
73622>>>>>    
73622>>>>>    Function IsChecked Returns Boolean
73624>>>>>        Boolean bOn
73624>>>>>        Handle hoCommandBars hoClientArea
73624>>>>>        Get CommandBarSystemObject to hoCommandBars
73625>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73626>>>>>        If hoClientArea Begin
73628>>>>>            // the clientarea's parent panel has message
73628>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
73629>>>>>        End
73629>>>>>>
73629>>>>>        Function_Return bOn
73630>>>>>    End_Function
73631>>>>>End_Class
73632>>>>>
73632>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
73633>>>>>    
73633>>>>>    Procedure Construct_Object
73635>>>>>        Forward Send Construct_Object
73637>>>>>        Set psCaption to C_$CaptionRestoreMenus
73638>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
73639>>>>>        Set psDescription to C_$DescRestoreMenus
73640>>>>>        Set psCategory to C_$CategoryWindow
73641>>>>>    End_Procedure
73642>>>>>    
73642>>>>>    Procedure OnExecute Variant vCommandBarControl
73644>>>>>        Handle hoCommandBars
73644>>>>>        Get CommandBarSystemObject to hoCommandBars
73645>>>>>        Send RestoreLayout of hoCommandBars
73646>>>>>    End_Procedure
73647>>>>>    
73647>>>>>End_Class
73648>>>>>
73648>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
73649>>>>>    
73649>>>>>    Procedure Construct_Object
73651>>>>>        Forward Send Construct_Object
73653>>>>>        Set psCaption to C_$CaptionCascade
73654>>>>>        Set psToolTip to C_$ToolTipCascade
73655>>>>>        Set psDescription to  C_$DescCascade
73656>>>>>        Set psImage to "ActionCascade.ico"
73657>>>>>        Set psCategory to C_$CategoryWindow
73658>>>>>    End_Procedure
73659>>>>>    
73659>>>>>    Procedure OnExecute Variant vCommandBarControl
73661>>>>>        Handle hoCommandBars hoClientArea
73661>>>>>        Get CommandBarSystemObject to hoCommandBars
73662>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73663>>>>>        If hoClientArea Begin
73665>>>>>            Send Cascade_Windows of hoClientArea
73666>>>>>        End
73666>>>>>>
73666>>>>>    End_Procedure
73667>>>>>End_Class
73668>>>>>
73668>>>>>Class cCJTileHorizontally is a cCJMenuItem
73669>>>>>    
73669>>>>>    Procedure Construct_Object
73671>>>>>        Forward Send Construct_Object
73673>>>>>        Set psCaption to C_$CaptionTileHorizontally
73674>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
73675>>>>>        Set psDescription to  C_$DescTileHorizontally
73676>>>>>        Set psImage to "ActionTileHorizontally.ico"
73677>>>>>        Set psCategory to C_$CategoryWindow
73678>>>>>    End_Procedure
73679>>>>>    
73679>>>>>    Procedure OnExecute Variant vCommandBarControl
73681>>>>>        Handle hoCommandBars hoClientArea
73681>>>>>        Get CommandBarSystemObject to hoCommandBars
73682>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73683>>>>>        If hoClientArea Begin
73685>>>>>            Send Tile_Windows_Horizontal of hoClientArea
73686>>>>>        End
73686>>>>>>
73686>>>>>    End_Procedure
73687>>>>>End_Class
73688>>>>>
73688>>>>>Class cCJTileVertically is a cCJMenuItem
73689>>>>>    
73689>>>>>    Procedure Construct_Object
73691>>>>>        Forward Send Construct_Object
73693>>>>>        Set psCaption to C_$CaptionTileVertically
73694>>>>>        Set psToolTip to C_$ToolTipTileVertically
73695>>>>>        Set psDescription to  C_$DescTileVertically
73696>>>>>        Set psImage to "ActionTileVertically.ico"
73697>>>>>        Set psCategory to C_$CategoryWindow
73698>>>>>    End_Procedure
73699>>>>>    
73699>>>>>    Procedure OnExecute Variant vCommandBarControl
73701>>>>>        Handle hoCommandBars hoClientArea
73701>>>>>        Get CommandBarSystemObject to hoCommandBars
73702>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73703>>>>>        If hoClientArea Begin
73705>>>>>            Send Tile_Windows_Vertical of hoClientArea
73706>>>>>        End
73706>>>>>>
73706>>>>>    End_Procedure
73707>>>>>End_Class
73708>>>>>
73708>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
73709>>>>>    
73709>>>>>    Procedure Construct_Object
73711>>>>>        Forward Send Construct_Object
73713>>>>>        Set psCaption to C_$CaptionMinimizeWindows
73714>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
73715>>>>>        Set psDescription to  C_$DescMinimizeWindows
73716>>>>>        Set psCategory to C_$CategoryWindow
73717>>>>>    End_Procedure
73718>>>>>    
73718>>>>>    Procedure OnExecute Variant vCommandBarControl
73720>>>>>        Handle hoCommandBars hoClientArea
73720>>>>>        Get CommandBarSystemObject to hoCommandBars
73721>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73722>>>>>        If hoClientArea Begin
73724>>>>>            // the clientarea's parent panel has message
73724>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
73725>>>>>        End
73725>>>>>>
73725>>>>>    End_Procedure
73726>>>>>End_Class
73727>>>>>
73727>>>>>
73727>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
73728>>>>>    
73728>>>>>    Procedure Construct_Object
73730>>>>>        Forward Send Construct_Object
73732>>>>>        Set psCaption to C_$CaptionRestoreWindows
73733>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
73734>>>>>        Set psDescription to  C_$DescRestoreWindows
73735>>>>>        Set psCategory to C_$CategoryWindow
73736>>>>>    End_Procedure
73737>>>>>    
73737>>>>>    Procedure OnExecute Variant vCommandBarControl
73739>>>>>        Handle hoCommandBars hoClientArea
73739>>>>>        Get CommandBarSystemObject to hoCommandBars
73740>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73741>>>>>        If hoClientArea Begin
73743>>>>>            // the clientarea's parent panel has message
73743>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
73744>>>>>        End
73744>>>>>>
73744>>>>>    End_Procedure
73745>>>>>End_Class
73746>>>>>
73746>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
73747>>>>>    
73747>>>>>    Procedure Construct_Object
73749>>>>>        Forward Send Construct_Object
73751>>>>>        Set psCaption to C_$CaptionArrangeIcons
73752>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
73753>>>>>        Set psDescription to  C_$DescArrangeIcons
73754>>>>>        Set psCategory to C_$CategoryWindow
73755>>>>>    End_Procedure
73756>>>>>    
73756>>>>>    Procedure OnExecute Variant vCommandBarControl
73758>>>>>        Handle hoCommandBars hoClientArea
73758>>>>>        Get CommandBarSystemObject to hoCommandBars
73759>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73760>>>>>        If hoClientArea Begin
73762>>>>>            Send Arrange_Icons of hoClientArea
73763>>>>>        End
73763>>>>>>
73763>>>>>    End_Procedure
73764>>>>>    
73764>>>>>End_Class
73765>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJAboutMenuItem.pkg)
73765>>>>>Use cCJCommandBarSystem.pkg
73765>>>>>Use LanguageText.pkg
73765>>>>>
73765>>>>>// It is expected that if you use this class that you provide an about object that is
73765>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
73765>>>>>// because you may wish to create your own custom about package.
73765>>>>>
73765>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
73766>>>>>
73766>>>>>    Procedure Construct_Object
73768>>>>>        Forward Send Construct_Object
73770>>>>>        Set psCaption to C_$CaptionAbout
73771>>>>>        Set psDescription to C_$ToolTipAbout
73772>>>>>        Set psToolTip to C_$DescAbout
73773>>>>>        Set psImage to "ActionAbout.ico"
73774>>>>>        Set psCategory to C_$CategoryHelp
73775>>>>>    End_Procedure
73776>>>>>    
73776>>>>>    Procedure OnExecute Variant vCommandBarControl
73778>>>>>        Handle hoCommandBars hoClientArea
73778>>>>>        Get CommandBarSystemObject to hoCommandBars
73779>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73780>>>>>        If hoClientArea Begin
73782>>>>>            Send Activate_About of hoClientArea
73783>>>>>        End
73783>>>>>>
73783>>>>>    End_Procedure
73784>>>>>
73784>>>>>End_Class
73785>>>>>
73785>>>>>
73785>>>Use cCJDeoMenuItemClasses.pkg
73785>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJMDIWindowsMenuItem.pkg)
73785>>>>>Use cCJCommandBarSystem.pkg
73785>>>>>
73785>>>>>Register_Function Client_ID Returns Integer
73785>>>>>
73785>>>>>// only used by cCJMDIWIndowsMenuItem
73785>>>>>Class cCJMDIWindowItem is a cCJMenuItem
73786>>>>>    
73786>>>>>    Procedure Construct_Object
73788>>>>>        Forward Send Construct_Object
73790>>>>>        Property Handle phWindow 0 // object id of view
73791>>>>>        Set pbControlFlagNoMovable to True
73792>>>>>        Set pbActiveUpdate to True
73793>>>>>    End_Procedure
73794>>>>>    
73794>>>>>    Procedure OnExecute Variant vCommandBarControl
73796>>>>>        Handle hWindow
73796>>>>>        Get phWindow to hWindow
73797>>>>>        Send Activate_View of hWindow
73798>>>>>    End_Procedure
73799>>>>>    
73799>>>>>End_Class
73800>>>>>
73800>>>>>
73800>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
73801>>>>>    
73801>>>>>    Procedure Construct_Object
73803>>>>>        Forward Send Construct_Object
73805>>>>>        Property Handle[] phArrayOfWindows
73806>>>>>        Set peControlType to xtpControlPopup
73807>>>>>        Set psCategory to C_$CategoryWindow
73808>>>>>    End_Procedure
73809>>>>>    
73809>>>>>    // This adds MDI windows to the existing menu items.
73809>>>>>    // This removes any existing windows menus and always adds a new set to the end
73809>>>>>    
73809>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
73811>>>>>        Handle  hClientArea hView
73811>>>>>        String  sLabel
73811>>>>>        Integer i iWindows
73811>>>>>        Handle[] hArrayOfWindows
73812>>>>>        Variant vItem
73812>>>>>        
73812>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
73812>>>>>        // also assume that destroying an action removes all menu instances of that action
73812>>>>>        Get phArrayOfWindows to hArrayOfWindows
73813>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
73814>>>>>        For i from 0 to (iWindows-1)
73820>>>>>>
73820>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
73821>>>>>        Loop
73822>>>>>>
73822>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
73823>>>>>        
73823>>>>>        // Add all views to this menu. Create the action and add the item
73823>>>>>        Move 0 to i
73824>>>>>        Get Client_Id to hClientArea // object id of client area
73825>>>>>        If (hClientArea > 0) Begin
73827>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
73828>>>>>            While (hView <> 0)
73832>>>>>                If (Active_State(hView)) Begin
73834>>>>>                    // create the action
73834>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
73835>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
73836>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
73837>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
73838>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
73840>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
73841>>>>>                    End
73841>>>>>>
73841>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
73842>>>>>                    If (i=0) Begin
73844>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
73845>>>>>                    End
73845>>>>>>
73845>>>>>                    // Create a menu item for this action
73845>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
73846>>>>>                    Increment i
73847>>>>>                End
73847>>>>>>
73847>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
73848>>>>>            Loop
73849>>>>>>
73849>>>>>        End
73849>>>>>>
73849>>>>>        
73849>>>>>        Set phArrayOfWindows to hArrayOfWindows
73850>>>>>        
73850>>>>>    End_Procedure
73851>>>>>    
73851>>>>>End_Class
73852>
73852>Object oApplication is a cApplication
73854>End_Object
73855>
73855>Object oToolTipController is a cToolTipController
73857>    Move Self to ghoToolTipController
73858>End_Object
73859>
73859>Use Cursor.pkg
73859>Object oCursor is a CursorShape
73861>End_Object
73862>
73862>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 23.0\Pkg\oEditContextMenu.pkg)
73862>>>Use cCJStandardMenuItemClasses.pkg
73862>>>
73862>>>Object oEditContextMenu is a cCJContextMenu
73864>>>    
73864>>>    Move Self to Default_Form_Floating_Menu_ID
73865>>>    
73865>>>    Object oUndoMenuItem is a cCJUndoMenuItem
73867>>>    End_Object
73868>>>    
73868>>>    Object oCutMenuItem is a cCJCutMenuItem
73870>>>        Set pbControlBeginGroup to True
73871>>>    End_Object
73872>>>    
73872>>>    Object oCopyMenuItem is a cCJCopyMenuItem
73874>>>    End_Object
73875>>>
73875>>>    Object oPasteMenuItem is a cCJPasteMenuItem
73877>>>    End_Object
73878>>>
73878>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
73880>>>    End_Object
73881>>>
73881>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
73883>>>        Set pbControlBeginGroup to True
73884>>>    End_Object
73885>>>
73885>>>End_Object
73886>>>
73886>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files\DataFlex 23.0\Pkg\oDEOEditContextMenu17.pkg)
73886>>>Use Windows.pkg
73886>>>Use cCJStandardMenuItemClasses.pkg
73886>>>Use cCJDeoMenuItemClasses.pkg
73886>>>
73886>>>
73886>>>Object oDEOEditContextMenu17 is a cCJContextMenu
73888>>>    
73888>>>    Move Self to Default_dbFloating_Menu_ID
73889>>>    
73889>>>    Object oUndoMenuItem is a cCJUndoMenuItem
73891>>>    End_Object
73892>>>    
73892>>>    Object oCutMenuItem is a cCJCutMenuItem
73894>>>        Set pbControlBeginGroup to True
73895>>>    End_Object
73896>>>    
73896>>>    Object oCopyMenuItem is a cCJCopyMenuItem
73898>>>    End_Object
73899>>>
73899>>>    Object oPasteMenuItem is a cCJPasteMenuItem
73901>>>    End_Object
73902>>>
73902>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
73904>>>    End_Object
73905>>>
73905>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
73907>>>        Set pbControlBeginGroup to True
73908>>>    End_Object
73909>>>
73909>>>    Object oPromptMenuItem is a cCJPromptMenuItem
73911>>>        Set pbControlBeginGroup to True
73912>>>    End_Object
73913>>>
73913>>>    Object oFindNextMenu is a cCJFindNextMenuItem
73915>>>        Set pbControlBeginGroup to True
73916>>>    End_Object
73917>>>
73917>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
73919>>>    End_Object
73920>>>
73920>>>    Object oClearMenuItem is a cCJClearMenuItem
73922>>>        Set pbControlBeginGroup to True
73923>>>    End_Object
73924>>>
73924>>>    Object oClearAllMenu is a cCJClearAllMenuItem
73926>>>    End_Object
73927>>>
73927>>>    Object oSaveMenu is a cCJSaveMenuItem
73929>>>    End_Object
73930>>>    
73930>>>    Object oDeleteMenu is a cCJDeleteMenuItem
73932>>>    End_Object
73933>>>
73933>>>    Object oRememberitem is a cCJRememberFieldMenuItem
73935>>>        Set pbControlBeginGroup to True
73936>>>    End_Object
73937>>>
73937>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
73939>>>    End_Object
73940>>>
73940>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
73942>>>    End_Object
73943>>>
73943>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
73945>>>    End_Object
73946>>>
73946>>>End_Object
73947>Use seq_chnl.pkg
73947>
73947>Object oMain is a Panel
73949>    Set Label to "ChatGPT API Sample"
73950>    Set Location to 4 3
73951>    Set Size to 300 450
73952>    
73952>    // Note: Ideally you should get your own API Key: from https://platform.openai.com/account/api-keys
73952>    //
73952>    // Ha!  This key got disabled by OpenAI when they detected I'd uploaded it to GitHub, so it won't
73952>    // work now, hence you will have to get your own!
73952>    
73952>    Property String psOpenAIAPIKey
73954>    
73954>    Procedure SetOpenAIAPIKey
73957>        Integer iChn
73957>        String  sKey
73957>        
73957>        Get Seq_New_Channel to iChn
73958>        Direct_Input channel iChn "C:\Temp\OpenAIAPIKey.txt"
73960>        Read channel iChn sKey
73962>        Close_Input channel iChn
73964>        Send Seq_Release_Channel iChn
73965>        
73965>        Set psOpenAIAPIKey to sKey
73966>    End_Procedure
73967>    Send SetOpenAIAPIKey
73968>    
73968>//    Object oCommandBarSystem is a cCJCommandBarSystem
73968>//        Set pbTimerUpdate to True
73968>//        Set peVisualTheme to xtpThemeOffice2013Outlook
73968>//        Set pbAutoResizeIcons to True
73968>//
73968>//        Procedure OnCreateCommandBars
73968>//            Handle hoOptions
73968>//            Get OptionsObject to hoOptions
73968>//            Forward Send OnCreateCommandBars
73968>//        End_Procedure
73968>//
73968>//        Object oMenuBar is a cCJMenuBar
73968>//
73968>//            Object oFileMenu is a cCJMenuItem
73968>//                Set peControlType to xtpControlPopup          
73968>//                Set psCaption   to "&File"
73968>//                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
73968>//                Set psCategory to "Menus"
73968>//
73968>//                Object oClearMenuItem is a cCJClearMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                End_Object
73968>//
73968>//                Object oClearAllMenu is a cCJClearAllMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                End_Object
73968>//
73968>//                Object oPromptMenuItem is a cCJPromptMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//                Object oFindMenuItem is a cCJFindMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//                Object oFindNextMenu is a cCJFindNextMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                End_Object
73968>//
73968>//                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                End_Object
73968>//
73968>//                Object oFindFirstMenu is a cCJFindFirstMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                End_Object
73968>//
73968>//                Object oFindLastMenu is a cCJFindLastMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                End_Object
73968>//
73968>//                Object oSaveMenuItem is a cCJSaveMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//                Object oDeleteMenuItem is a cCJDeleteMenuItem
73968>//                    Set pbAddToDesignerMenu to True
73968>//                End_Object
73968>//
73968>//                Object oExitMenu is a cCJExitMenuItem
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//            End_Object
73968>//
73968>//            Object oViewMenu is a cCJMenuItem
73968>//                Set peControlType to xtpControlPopup
73968>//                Set psCaption to "&View"
73968>//                Set psToolTip to "View"
73968>//                Set psDescription to "Available Views"
73968>//
73968>//                Object oChatGPTTestMenuItem is a cCJMenuItem
73968>//                    Set psCaption to "ChatGPTTest"
73968>//                    Set psTooltip to "ChatGPTTest"
73968>//                
73968>//                    Procedure OnExecute Variant vCommandBarControl
73968>//                        Handle hoClient
73968>//                        Get Client_Id to hoClient
73968>//                        Send Activate_oChatGPTTest of hoClient
73968>//                    End_Procedure
73968>//                End_Object
73968>//            End_Object
73968>//            
73968>//            Object oReportMenu is a cCJMenuItem
73968>//                Set peControlType to xtpControlPopup          
73968>//                Set psCaption to "&Report"
73968>//                Set psToolTip to "Report"
73968>//                Set psDescription to "Available Reports"
73968>//            End_Object
73968>//
73968>//            Object oNavigateMenu is a cCJMenuItem
73968>//                Set peControlType to xtpControlPopup      
73968>//                Set psCaption to "&Navigate"    
73968>//                Set psTooltip to "Navigate"    
73968>//                Set psDescription to "Move to different areas of the application"
73968>//
73968>//                Object oNextAreaMenu is a cCJNextAreaMenu
73968>//                End_Object
73968>//
73968>//                Object oPriorAreaMenu is a cCJPriorAreaMenu
73968>//                End_Object
73968>//
73968>//                Object oNextViewMenu is a cCJNextViewMenu
73968>//                End_Object
73968>//
73968>//                Object oPriorViewMenu is a cCJPriorViewMenu
73968>//                End_Object
73968>//
73968>//                Object oPromptMenu is a cCJPromptMenuItem
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//                Object oZoomMenu is a cCJZoomMenuItem
73968>//                End_Object
73968>//
73968>//            End_Object
73968>//
73968>//            Object oWindowMenu is a cCJMDIWindowsMenuItem
73968>//                Set peControlType to xtpControlPopup
73968>//                Set psCaption to "&Window"
73968>//                Set psToolTip to "Window"
73968>//                Set psDescription to "Display Current Views and set other display options."    
73968>//
73968>//                // These are the static windows items. More will be created in onInitPopup 
73968>//                Object oDisplayOptionsMenu is a cCJMenuItem
73968>//                    Set peControlType to xtpControlPopup          
73968>//                    Set psCaption to "&Display Options"
73968>//                    Set psToolTip to "Display Options"
73968>//                    Set psDescription to "Set display options"
73968>//
73968>//                    Object oStatusbarMenu is a cCJStatusbarMenuItem
73968>//                    End_Object
73968>//
73968>//                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
73968>//                    End_Object
73968>//
73968>//                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
73968>//                        Set pbControlBeginGroup to True
73968>//                    End_Object
73968>//
73968>//                End_Object
73968>//
73968>//                Object oCascadeMenu is a cCJCascadeMenuItem
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//                Object oHorizTile is a cCJTileHorizontally
73968>//                End_Object
73968>//
73968>//                Object oVertTile is a cCJTileVertically
73968>//                End_Object
73968>//
73968>//                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
73968>//                End_Object
73968>//
73968>//                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
73968>//                    Set pbControlBeginGroup to True
73968>//                End_Object
73968>//
73968>//            End_Object
73968>//
73968>//            Object oHelpMenu is a cCJMenuItem
73968>//                Set peControlType to xtpControlPopup    
73968>//                Set psCaption to "&Help"
73968>//                Set psDescription to "Access Information for learning and using this DataFlex application."
73968>//                Set psToolTip to "Help"
73968>//
73968>//                Object oHelpMenuItem is a cCJHelpMenuItem 
73968>//                End_Object
73968>//
73968>//                Object oAboutMenuItem is a cCJAboutMenuItem
73968>//                End_Object
73968>//
73968>//            End_Object
73968>//
73968>//        End_Object
73968>//
73968>//        Object oFindToolBar is a cCJToolbar
73968>//            Set psTitle to "Finding Toolbar"
73968>//
73968>//            Object oFindFirstTool is a cCJFindFirstMenuItem
73968>//            End_Object
73968>//
73968>//            Object oFindPreviousTool is a cCJFindPreviousMenuItem
73968>//            End_Object
73968>//
73968>//            Object oFindMenuTool is a cCJFindMenuItem
73968>//            End_Object
73968>//
73968>//            Object oFindNextTool is a cCJFindNextMenuItem
73968>//            End_Object
73968>//
73968>//            Object oFindLastTool is a cCJFindLastMenuItem
73968>//            End_Object
73968>//
73968>//            Object oPromptToolItem is a cCJPromptMenuItem
73968>//                Set pbControlBeginGroup to True
73968>//            End_Object
73968>//
73968>//        End_Object
73968>//
73968>//        Object oFileToolBar is a cCJToolbar
73968>//            Set psTitle to "Data Entry Toolbar"
73968>//
73968>//            Object oClearToolItem is a cCJClearMenuItem
73968>//                Set peControlStyle to xtpButtonIconAndCaption
73968>//            End_Object
73968>//
73968>//            Object oClearAllToolItem2 is a cCJClearAllMenuItem
73968>//                Set peControlStyle to xtpButtonIconAndCaption
73968>//            End_Object
73968>//
73968>//            Object oSaveToolItem is a cCJSaveMenuItem
73968>//                Set peControlStyle to xtpButtonIconAndCaption
73968>//                Set pbControlBeginGroup to True
73968>//            End_Object
73968>//
73968>//            Object oDeleteToolItem is a cCJDeleteMenuItem
73968>//                Set peControlStyle to xtpButtonIconAndCaption
73968>//            End_Object
73968>//
73968>//        End_Object
73968>//
73968>//        Object oEditToolBar is a cCJToolbar
73968>//            Set psTitle to "Edit Toolbar"
73968>//
73968>//            Object oCutToolbarItem is a cCJCutMenuItem
73968>//            End_Object
73968>//
73968>//            Object oCopyToolbarItem is a cCJCopyMenuItem
73968>//            End_Object
73968>//
73968>//            Object oPasteToolbarItem is a cCJPasteMenuItem
73968>//            End_Object
73968>//
73968>//            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
73968>//                Set pbControlBeginGroup to True
73968>//            End_Object
73968>//
73968>//        End_Object
73968>//
73968>//        Object oRememberToolbar is a cCJToolbar
73968>//            Set psTitle to C_$Remember
73968>//
73968>//            Object oRememberItems is a cCJMenuItem
73968>//
73968>//                Set peControlType to xtpControlPopup
73968>//                Set peControlStyle to xtpButtonCaption
73968>//                Set psCaption to C_$Remember
73968>//                
73968>//                Object oMenuItem is a cCJRememberFieldMenuItem
73968>//                    Set peControlStyle to xtpButtonIconAndCaption
73968>//                End_Object
73968>//                
73968>//                Object oMenuItem is a cCJRememberLastFieldMenuItem
73968>//                    Set peControlStyle to xtpButtonIconAndCaption
73968>//                End_Object
73968>//                
73968>//                Object oMenuItem is a cCJUnRememberFieldMenuItem
73968>//                    Set peControlStyle to xtpButtonIconAndCaption
73968>//                End_Object
73968>//                
73968>//                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
73968>//                    Set peControlStyle to xtpButtonIconAndCaption
73968>//                End_Object
73968>//
73968>//            End_Object
73968>//            
73968>//        End_Object
73968>//        
73968>//        Object oStatusBar is a cCJStatusBar
73968>//
73968>//            Object oStatusPane1 is a cCJStatusBarPane
73968>//                Set piID to sbpIDIdlePane
73968>//                Set pbStyleStretch to True
73968>//            End_Object
73968>//
73968>//            Object oStatusPane2 is a cCJStatusBarPane
73968>//                Set phoViewPane to Self
73968>//                Set pbStyleStretch to True
73968>//            End_Object
73968>//
73968>//        End_Object
73968>//
73968>//    End_Object
73968>    
73968>    Use cHttpTransferREST.pkg
Including file: cHttpTransferREST.pkg    (C:\Projects\ChatGPTAPI\AppSrc\cHttpTransferREST.pkg)
73968>>>// Class: cHttpTransferREST
73968>>>//
73968>>>// An enhanced version of the cHttpTransfer class that stores received data
73968>>>// in a UChar array property (pucaData) (and also content type in psContentType).
73968>>>//
73968>>>// Provides a MakeJsonCall function for calling REST services.  OAuth2 is
73968>>>// assumed, as is JSON.
73968>>>//
73968>>>// The containing object (or a parent of it) is REQUIRED to provide the function
73968>>>// OAuth2AccessToken which should return the Access Token returned by the OAuth2
73968>>>// process.  (UNLESS pbRequireToken is set to False.)
73968>>>//
73968>>>// Revision:
73968>>>//     2023/03/07  (MJP, UIG)
73968>>>//        Added pbRequireToken to allow use in non-OAuth2 environments
73968>>>//        Added Extra headers (AddExtraHeader and ClearExtraHeaders) so you can
73968>>>//        add your own as required (i.e. you might do:
73968>>>//           AddExtraHeader "Authorization" "Basic: aGbfRfdfhgpRt4^fDDr4")
73968>>>//     2023/03/06  (MJP, UIG)
73968>>>//        Added the pbDefeatCaching property & if True (the default) will add
73968>>>//        a RandomHexUUID to the query string to do that, so that repeated calls
73968>>>//        to the same resource will get fresh results.
73968>>>//     2022/06/10  (MJP, UIG) 
73968>>>//        Initial version: 1.0
73968>>>//
73968>>>
73968>>>Use cHttpTransfer.pkg
73968>>>Use WinUuid.pkg
Including file: WinUuid.pkg    (C:\Program Files\DataFlex 23.0\Pkg\WinUuid.pkg)
73968>>>>>Use Unicode.Pkg
73968>>>>>
73968>>>>>External_Function WinAPI_UuidCreate "UuidCreate" Rpcrt4.dll ;    Pointer Uuid ;    Returns Integer
73969>>>>>
73969>>>>>External_Function WinAPI_UuidToString  "UuidToStringW" Rpcrt4.dll ;    Pointer pUuid ;    Pointer lpUUIDString ;    Returns Integer
73970>>>>>
73970>>>>>External_Function WinAPI_UuidCreateSequential "UuidCreateSequential" Rpcrt4.dll ;    Pointer pUuid ;    Returns Integer
73971>>>>>
73971>>>>>External_Function WinAPI_RpcStringFree "RpcStringFreeW" Rpcrt4.dll ;    Pointer pStr ;    Returns Integer
73972>>>>>
73972>>>>>
73972>>>>>// Returns a 'random' Universally Unique Identifier string as a 32 digit hex number.
73972>>>>>Function RandomHexUUID Global Returns String
73974>>>>>    Pointer pUUID pUUIDStr
73974>>>>>    Integer iRetval iOffset iChar
73974>>>>>    String sUUID
73974>>>>>    
73974>>>>>    Move (Alloc(16)) to pUUID
73975>>>>>    
73975>>>>>    Move (WinAPI_UuidCreate (pUUID)) to iRetval
73976>>>>>    
73976>>>>>    If (iRetval = 0) Begin
73978>>>>>        Move 0 to pUUIDStr
73979>>>>>        
73979>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
73980>>>>>        If (iRetval = 0) Begin
73982>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
73983>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
73984>>>>>            
73984>>>>>            Move (Uppercase (sUUID)) to sUUID
73985>>>>>        End
73985>>>>>>
73985>>>>>    End
73985>>>>>>
73985>>>>>    
73985>>>>>    Move (Free(pUUID)) to iRetval
73986>>>>>    
73986>>>>>    Function_Return sUUID
73987>>>>>End_Function
73988>>>>>
73988>>>>>
73988>>>>>// Returns a sequential Universally Unique Identifier string as a 32 digit hex number.
73988>>>>>Function SeqHexUUID Global Returns String
73990>>>>>    Pointer pUUID pUUIDStr
73990>>>>>    Integer iRetval iOffset iChar
73990>>>>>    String sUUID
73990>>>>>    
73990>>>>>    Move (Alloc(16)) to pUUID
73991>>>>>    
73991>>>>>    Move (WinAPI_UuidCreateSequential (pUUID)) to iRetval
73992>>>>>    
73992>>>>>    If (iRetval = 0) Begin
73994>>>>>        Move 0 to pUUIDStr
73995>>>>>        
73995>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
73996>>>>>        If (iRetval = 0) Begin
73998>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
73999>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
74000>>>>>            
74000>>>>>            Move (Uppercase (sUUID)) to sUUID
74001>>>>>        End
74001>>>>>>
74001>>>>>    End
74001>>>>>>
74001>>>>>    
74001>>>>>    Move (Free(pUUID)) to iRetval
74002>>>>>    
74002>>>>>    Function_Return sUUID
74003>>>>>End_Function
74004>>>
74004>>>Enum_List
74004>>>    Define C_httpNoJson for -1
74004>>>    Define C_httpOK
74004>>>    Define C_httpCallFailed
74004>>>    Define C_httpBadStatus
74004>>>    Define C_httpJsonParseFail
74004>>>    Define C_httpNoAccessToken
74004>>>End_Enum_List
74004>>>
74004>>>// NOTE: This function MUST exist in an object parent in order to give objects
74004>>>//       of the class access to the AccessToken returned by the OAuth2 login
74004>>>//       process and MUST return that token!  (Unless you set pbRequireToken
74004>>>//       to False)
74004>>>Register_Function OAuth2AccessToken Returns String
74004>>>
74004>>>Class cHttpTransferREST is a cHttpTransfer
74005>>>    
74005>>>    Procedure Construct_Object
74007>>>        Forward Send Construct_Object
74009>>>        
74009>>>        Property UChar[]  pucaData
74010>>>        Property String   psContentType     ""
74011>>>        Property Integer  piError           C_httpOK  // Zero
74012>>>        Property String   psError           ""
74013>>>        Property String   psAcceptTypes     "*/*"
74014>>>        Property String   psSendType        "application/json"
74015>>>        Property Boolean  pbDefeatCaching   True
74016>>>        Property Boolean  pbRequireToken    True
74017>>>        Property String[] pasHeaderNames
74018>>>        Property String[] pasHeaderValues
74019>>>
74019>>>        Set piRemotePort    to rpHttpSSL
74020>>>        Set peTransferFlags to ifSecure
74021>>>    End_Procedure
74022>>>        
74022>>>    Procedure OnDataReceived String sContentType String sData
74024>>>        UChar[] ucaData
74025>>>        
74025>>>        Get pucaData        to ucaData
74026>>>        Set pucaData        to (AppendArray(ucaData, StringToUCharArray(sData)))
74027>>>        Set psContentType   to sContentType
74028>>>    End_Procedure
74029>>>    
74029>>>    Procedure AddExtraHeader String sName String sValue
74031>>>        String[] asNames asValues
74033>>>        Integer  iIdx iEnd
74033>>>        
74033>>>        Get pasHeaderNames to asNames
74034>>>        Move (SearchArray(asNames, sName)) to iIdx
74035>>>        
74035>>>        If (iIdx = -1) Begin  // Not already in array
74037>>>            Move (SizeOfArray(asNames)) to iEnd
74038>>>            Get pasHeaderValues         to asValues
74039>>>            Move sName                  to asNames[iEnd]
74040>>>            Move sValue                 to asValues[iEnd]
74041>>>            Set pasHeaderNames          to asNames
74042>>>            Set pasHeaderValues         to asValues
74043>>>        End
74043>>>>
74043>>>        
74043>>>    End_Procedure
74044>>>    
74044>>>    Procedure ClearExtraHeaders
74046>>>        String[] asEmpty
74047>>>        
74047>>>        Set pasHeaderNames  to asEmpty
74048>>>        Set pasHeaderValues to asEmpty
74049>>>    End_Procedure
74050>>>    
74050>>>    Procedure Reset
74052>>>        UChar[] empty
74053>>>        
74053>>>        Set pucaData        to empty
74054>>>        Set psContentType   to ""
74055>>>        Set piError         to C_httpOK  // Zero! ;-)
74056>>>        Set psError         to ""
74057>>>        Send ClearHeaders
74058>>>    End_Procedure
74059>>>    
74059>>>    Function psData Returns String
74061>>>        Function_Return (UCharArrayToString(pucaData(Self)))
74062>>>    End_Function
74063>>>    
74063>>>    Function MakeJsonCall String sVerb String sPath String sParams Handle hoBody Returns Handle
74065>>>        Handle   hoJson
74065>>>        Integer  iOK iStatus iHdrs i
74065>>>        Boolean  bOK
74065>>>        String   sData sBody sToken
74065>>>        String[] asHdrNames asHdrVals
74067>>>        
74067>>>        Move (Uppercase(sVerb)) to sVerb  // Probably not required ;-)
74068>>>        
74068>>>        Send Reset
74069>>>        
74069>>>        If (pbRequireToken(Self)) Begin
74071>>>            Get OAuth2AccessToken   to sToken
74072>>>        
74072>>>            If (sToken = "") Begin
74074>>>                Set piError to C_httpNoAccessToken
74075>>>                Set psError to "No OAuth2 access token"
74076>>>                Function_Return 0
74077>>>            End
74077>>>>
74077>>>            
74077>>>        End
74077>>>>
74077>>>        
74077>>>        // Add required headers:
74077>>>        Get AddHeader "Content-Type"      (psSendType(Self))    to iOK
74078>>>        Get AddHeader "Accept"            (psAcceptTypes(Self)) to iOK
74079>>>        If (sToken <> "") ;            Get AddHeader "Authorization" ("Bearer" * sToken)   to iOK
74082>>>        
74082>>>        // Deal with any extra headers
74082>>>        Get pasHeaderNames to asHdrNames
74083>>>        Move (SizeOfArray(asHdrNames)) to iHdrs
74084>>>         
74084>>>        If iHdrs Begin
74086>>>            Get pasHeaderValues to asHdrVals
74087>>>            Decrement iHdrs
74088>>>            
74088>>>            For i from 0 to iHdrs
74094>>>>
74094>>>                Get AddHeader asHdrNames[i] asHdrVals to iOK
74095>>>            Loop
74096>>>>
74096>>>            
74096>>>        End
74096>>>>
74096>>>        
74096>>>        // To defeat cacheing, we add a "nonce" set to a random hex UUID to the
74096>>>        // query string - after any real parameters we are passed, if any:
74096>>>        If (pbDefeatCaching(Self)) Begin
74098>>>            If (sParams = "") ;                Move (sPath + "?nonce=" + RandomHexUUID())                  to sPath
74101>>>            Else ;                Move (sPath + "?" + sParams + "&nonce=" + RandomHexUUID())  to sPath
74103>>>        End
74103>>>>
74103>>>        Else If (sParams <> "") ;            Move (sPath + "?" + sParams)                                    to sPath
74107>>>        
74107>>>        // Assumes that only POST, PUT and PATCH verbs will have a body:
74107>>>        If (((sVerb = "POST") or (sVerb = "PUT") or (sVerb = "PATCH")) and hoBody) Begin
74109>>>            Get Stringify of hoBody to sBody
74110>>>            Send Destroy of hoBody
74111>>>        End
74111>>>>
74111>>>        
74111>>>        // Make the call
74111>>>        Get HttpVerbAddrRequest sPath (AddressOf(sBody)) (SizeOfString(sBody)) False sVerb to iOK
74112>>>        
74112>>>        If iOK Begin
74114>>>            Get ResponseStatusCode  to iStatus
74115>>>            Get psData              to sData
74116>>>            
74116>>>            If ((iStatus >= 200) and (iStatus < 300)) Begin
74118>>>                
74118>>>                // If no JSON was returned, then return -1, indicating that, 
74118>>>                // which may be perfectly correct in some cases 
74118>>>                // (HTTP 204 - No Content, for instance).
74118>>>                If (SizeOfString(sData) < 2) ;  // 2 chars is the minimum JSON                    Function_Return C_httpNoJson
74121>>>
74121>>>                Get Create (RefClass(cJsonObject)) to hoJson
74122>>>                Set pbRequireAllMembers of hoJson to False
74123>>>                Set pbEscapeForwardSlash of hoJson to False
74124>>>                Get ParseString of hoJson sData to bOK
74125>>>                
74125>>>                If bOK ;                    Function_Return hoJson  // Success! Now caller's responsibility to destroy.
74128>>>                
74128>>>                // So if parsing failed:
74128>>>                Set piError to C_httpJsonParseFail
74129>>>                Set psError to ('Http Call to "' + psRemoteHost(Self) + '/' + sPath + "'" * ;                                'returned invalid JSON. Parse error:' * ;                                psParseError(hoJson))
74130>>>                Send Destroy of hoJson
74131>>>            End
74131>>>>
74131>>>            Else Begin  // Not a 2xx status
74132>>>                Set piError to C_httpBadStatus
74133>>>                Set psError to ('HTTP Call to "' + psRemoteHost(Self) + '/' + sPath + '"' * ;                                'returned a status of' * String(iStatus) * '-' * ;                                ResponseStatusText(Self) * ;                                "(" + sData + ")")
74134>>>            End
74134>>>>
74134>>>            
74134>>>        End
74134>>>>
74134>>>        Else Begin  // Call returned 0
74135>>>            Set piError to C_httpCallFailed
74136>>>            Set psError to ('HTTP Call to "' + psRemoteHost(Self) + '/' + sPath + '" failed')
74137>>>        End
74137>>>>
74137>>>        
74137>>>        Function_Return 0  // Indicates failure: check piError and psError for reason
74138>>>    End_Function
74139>>>    
74139>>>End_Class
74140>    Object oHttp is a cHttpTransferREST
74142>        Set psRemoteHost    to "api.openai.com"
74143>        Set piRemotePort    to rpHttpSSL
74144>        Set peTransferFlags to ifSecure
74145>        Set pbDefeatCaching to False
74146>    End_Object
74147>    
74147>    Function OAuth2AccessToken Returns String
74150>        Function_Return (psOpenAIAPIKey(Self))
74151>    End_Function
74152>
74152>    Use JsonPath.pkg
Including file: JsonPath.pkg    (C:\Projects\ChatGPTAPI\AppSrc\JsonPath.pkg)
74152>>>//==============================================================================
74152>>>// JsonPath.pkg
74152>>>//==============================================================================
74152>>>//
74152>>>// Just a simple package which uses the cJsonPath class, creates an object of it,
74152>>>// and adds three global functions: JsonObjectAtPath, JsonValueAtPath and 
74152>>>// JsonCountAtPath, calling those of the object.
74152>>>//
74152>>>// Licence (MIT):
74152>>>//
74152>>>// Copyright 2020, Mike Peat, Unicorn InterGlobal Ltd.
74152>>>//
74152>>>// Permission is hereby granted, free of charge, to any person obtaining a copy
74152>>>// of this software and associated documentation files (the "Software"), to deal
74152>>>// in the Software without restriction, including without limitation the rights
74152>>>// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
74152>>>// copies of the Software, and to permit persons to whom the Software is
74152>>>// furnished to do so, subject to the following conditions:
74152>>>//
74152>>>// The above copyright notice and this permission notice shall be included in
74152>>>// all copies or substantial portions of the Software.
74152>>>//
74152>>>// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
74152>>>// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
74152>>>// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
74152>>>// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
74152>>>// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
74152>>>// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
74152>>>// SOFTWARE.
74152>>>//
74152>>>//==============================================================================
74152>>>
74152>>>Use cJsonPath.pkg
Including file: cJsonPath.pkg    (C:\Projects\ChatGPTAPI\AppSrc\cJsonPath.pkg)
74152>>>>>//==============================================================================
74152>>>>>// cJsonPath.pkg
74152>>>>>//
74152>>>>>// A class which will allow you to get either object handles or values or array
74152>>>>>// copunts from JSON objects using their path.
74152>>>>>// 
74152>>>>>// Author:  Mike Peat
74152>>>>>// Date:    06/02/2020
74152>>>>>//
74152>>>>>// Usage:
74152>>>>>//   To return a JSON object at a path:
74152>>>>>//       Get JsonAtPath of oJsonPathObject hoSourceJsonObject, path to hoVar
74152>>>>>//     or:
74152>>>>>//       Move (JsonAtPath(oJsonPathObject, hoSourceJsonObject, path)) to hoVar
74152>>>>>//
74152>>>>>//   To return a value at a path:
74152>>>>>//       Get ValueAtPath of oJsonPathObject hoSourceJsonObject path to sVar
74152>>>>>//     or
74152>>>>>//       Move (ValueAtPath(oJsonPathObject, hoSourceJson, path)) to sVar
74152>>>>>//
74152>>>>>// Path notation:
74152>>>>>//
74152>>>>>//    A string with JSON object names, separated by dots "." and array indices
74152>>>>>//    in square brackets: "foo.bar.baz[0].bill[1][0]"
74152>>>>>//
74152>>>>>// Sample JSON:
74152>>>>>//
74152>>>>>//    {
74152>>>>>//      "foo": {
74152>>>>>//              "bar": {
74152>>>>>//                      "baz": [
74152>>>>>//                              66.123,
74152>>>>>//                              {
74152>>>>>//                                      "jim": "jack"
74152>>>>>//                              },
74152>>>>>//                              false,
74152>>>>>//                              {
74152>>>>>//                                      "bob": 42
74152>>>>>//                              },
74152>>>>>//                              {
74152>>>>>//                                      "kim": "possible"
74152>>>>>//                              },
74152>>>>>//                              [55, 1, 19, {
74152>>>>>//                                      "Mork": [
74152>>>>>//                                              [35, 67, 88, 100, [21, 33, 45, "Tim"]]
74152>>>>>//                                      ]
74152>>>>>//                              }]
74152>>>>>//                      ]
74152>>>>>//              }
74152>>>>>//      }
74152>>>>>//    }
74152>>>>>//
74152>>>>>// Examples:
74152>>>>>//    Move (JsonAtPath(oJPath, hoJson, "foo.bar.baz[5][3].Mork[0][4][3]")) to hoObj
74152>>>>>//
74152>>>>>//    Get ValueAtPath of oJPath hJson "foo.bar.baz[5][3].Mork[0][4][3]" to sVal
74152>>>>>//      (sVal = "Tim")
74152>>>>>//
74152>>>>>// In the first example the JSON object would be returned; if you then performed
74152>>>>>// Move (JsonValue(hoObj)) to sVal you would get the same result as the second
74152>>>>>// example - i.e. "Tim".
74152>>>>>//
74152>>>>>// NOTE: JSON is case-sensitive, so your path-strings must exactly match the
74152>>>>>//       object names ("foo" is *not* "Foo") in the JSON file.
74152>>>>>//
74152>>>>>//==============================================================================
74152>>>>>//
74152>>>>>// Structure
74152>>>>>// =========
74152>>>>>//
74152>>>>>// The core function is JsonAtPath, which returns the JSON member in the passed
74152>>>>>// Json Object at the passed Path, if it is there.
74152>>>>>//
74152>>>>>// The two other public functions - ValueAtPath and CountAtPath - just call
74152>>>>>// JsonAtPath and then work on that to extract the Json value or the Array count
74152>>>>>// of that object respectively.
74152>>>>>//
74152>>>>>// JsonAtPath is supported by the two private functions, ObjectHandle and
74152>>>>>// ArrayHandle, which deal with Json Objects and Array Objects respectively that
74152>>>>>// are encountered in working down the path.  These call each other (or
74152>>>>>// theselves) recursively to deal with elements of the path.
74152>>>>>//
74152>>>>>//==============================================================================
74152>>>>>// Licence (MIT):
74152>>>>>//
74152>>>>>// Copyright 2020, Mike Peat, Unicorn InterGlobal Ltd.
74152>>>>>//
74152>>>>>// Permission is hereby granted, free of charge, to any person obtaining a copy
74152>>>>>// of this software and associated documentation files (the "Software"), to deal
74152>>>>>// in the Software without restriction, including without limitation the rights
74152>>>>>// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
74152>>>>>// copies of the Software, and to permit persons to whom the Software is
74152>>>>>// furnished to do so, subject to the following conditions:
74152>>>>>//
74152>>>>>// The above copyright notice and this permission notice shall be included in
74152>>>>>// all copies or substantial portions of the Software.
74152>>>>>//
74152>>>>>// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
74152>>>>>// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
74152>>>>>// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
74152>>>>>// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
74152>>>>>// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
74152>>>>>// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
74152>>>>>// SOFTWARE.
74152>>>>>//
74152>>>>>//==============================================================================
74152>>>>>// Added CountAtPath function to return the count of elements in an array at the
74152>>>>>// passed path.
74152>>>>>//==============================================================================
74152>>>>>//
74152>>>>>// 2023-03-29  MJP (UIG): Allowed passing a JSON Array instead of a JSON Object.
74152>>>>>//
74152>>>>>//==============================================================================
74152>>>>>//
74152>>>>>// 2023-04-05  MJP (UIG): Changed logic for passing an empty (i.e. "") path.
74152>>>>>//                        Previously this would be an error and always return 0,
74152>>>>>//                        but it turns out that sometimes it is not, so handled
74152>>>>>//                        it better (I think! :0).  Seems to work OK.
74152>>>>>//
74152>>>>>//==============================================================================
74152>>>>>
74152>>>>>Use UI
74152>>>>>Use cJsonObject.pkg
Including file: cJsonObject.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cJsonObject.pkg)
74152>>>>>>>// cJSONObject is defined directly in fmac
74152>>>>>>>// We just define the constants here. They have intentionally not been moved to fmac
74152>>>>>>>
74152>>>>>>>
74152>>>>>>>Enum_List
74152>>>>>>>    Define jpWhitespace_Plain for 0
74152>>>>>>>    Define jpWhitespace_Spaced for 1
74152>>>>>>>    Define jpWhitespace_Pretty for 2
74152>>>>>>>End_Enum_List
74152>>>>>>>
74152>>>>>>>Enum_List
74152>>>>>>>    Define jsonTypeNull
74152>>>>>>>    Define jsonTypeBoolean
74152>>>>>>>    Define jsonTypeDouble
74152>>>>>>>    Define jsonTypeInteger
74152>>>>>>>    Define jsonTypeObject
74152>>>>>>>    Define jsonTypeArray
74152>>>>>>>    Define jsonTypeString
74152>>>>>>>End_Enum_List
74152>>>>>>>
74152>>>>>
74152>>>>>Class cJsonPath is a cObject
74153>>>>>    
74153>>>>>    Function ArrayHandle Handle hoJson String sPath Returns Handle
74155>>>>>        Integer iLSBPos iRSBPos iIndex
74155>>>>>        Handle  hoMemb hoObj
74155>>>>>        
74155>>>>>        If not hoJson ;            Function_Return 0
74158>>>>>            
74158>>>>>        If (sPath = "") Begin
74160>>>>>            
74160>>>>>            If (JsonType(hoJson) = jsonTypeArray) ;                Function_Return hoJson
74163>>>>>                
74163>>>>>            Send Destroy of hoJson
74164>>>>>            Function_Return 0
74165>>>>>        End
74165>>>>>>
74165>>>>>        
74165>>>>>        Move (Pos("[", sPath)) to iLSBPos
74166>>>>>        Move (Pos("]", sPath)) to iRSBPos
74167>>>>>        
74167>>>>>        If (not(iLSBPos) or ;            not(iRSBPos) or ;            (iLSBPos > iRSBPos) or ;            (iLSBPos <> 1)) Begin
74169>>>>>            Send Destroy of hoJson
74170>>>>>            Function_Return 0
74171>>>>>        End
74171>>>>>>
74171>>>>>        
74171>>>>>        Move (Mid(sPath, (iRSBPos - iLSBPos - 1), (iLSBPos + 1))) to iIndex
74172>>>>>        
74172>>>>>        If (MemberCount(hoJson) <= iIndex) Begin
74174>>>>>            Send Destroy of hoJson
74175>>>>>            Function_Return 0
74176>>>>>        End
74176>>>>>>
74176>>>>>        
74176>>>>>        Get MemberByIndex of hoJson iIndex to hoMemb
74177>>>>>
74177>>>>>        If (Length(Trim(sPath)) = iRSBPos) Begin // It ends here
74179>>>>>            Send Destroy of hoJson
74180>>>>>            Function_Return hoMemb
74181>>>>>        End
74181>>>>>>
74181>>>>>
74181>>>>>        Move (Right(sPath, (Length(sPath) - iRSBPos))) to sPath
74182>>>>>        If (Left(sPath, 1) = ".") ;            Move (Replace(".", sPath, "")) to sPath
74185>>>>>        Get ObjectHandle hoMemb sPath to hoObj
74186>>>>>        Send Destroy of hoJson
74187>>>>>        Function_Return hoObj
74188>>>>>    End_Function
74189>>>>>    
74189>>>>>    Function ObjectHandle Handle hoJson String sPath Returns Handle
74191>>>>>        Integer iLSBPos iDotPos iPos
74191>>>>>        String  sMemb
74191>>>>>        Handle  hoMemb hoObj
74191>>>>>
74191>>>>>        If not hoJson ;            Function_Return 0
74194>>>>>        
74194>>>>>        If (sPath = "") Begin
74196>>>>>            
74196>>>>>            If (JsonType(hoJson) = jsonTypeObject) ;                Function_Return hoJson
74199>>>>>                
74199>>>>>            Send Destroy of hoJson
74200>>>>>            Function_Return 0
74201>>>>>        End
74201>>>>>>
74201>>>>>            
74201>>>>>        If (Left(sPath, 1) = "[") ;            Function_Return (ArrayHandle(Self, hoJson, sPath))
74204>>>>>        
74204>>>>>        Move (Pos(".", sPath))      to iDotPos
74205>>>>>        Move (Pos("[", sPath))      to iLSBPos
74206>>>>>        
74206>>>>>        If (iLSBPos and iDotPos) ;            Move (iDotPos min iLSBPos)  to iPos
74209>>>>>        Else If (iDotPos) ;            Move iDotPos                to iPos
74213>>>>>        Else ;            Move iLSBPos                to iPos
74215>>>>>        
74215>>>>>        If not iPos Begin  // We are there!
74217>>>>>            
74217>>>>>            If (HasMember(hoJson, sPath)) Begin
74219>>>>>                Get Member of hoJson sPath to hoMemb
74220>>>>>                Send Destroy of hoJson
74221>>>>>                Function_Return hoMemb
74222>>>>>            End
74222>>>>>>
74222>>>>>            Else Begin
74223>>>>>                Send Destroy of hoJson
74224>>>>>                Function_Return 0
74225>>>>>            End
74225>>>>>>
74225>>>>>        
74225>>>>>        End
74225>>>>>>
74225>>>>>        
74225>>>>>        Move (Left(sPath, (iPos - 1)))    to sMemb
74226>>>>>        
74226>>>>>        If (HasMember(hoJson, sMemb)) Begin
74228>>>>>            Get Member of hoJson sMemb to hoMemb
74229>>>>>            Send Destroy of hoJson
74230>>>>>            Move (Right(sPath, (Length(sPath) - iPos + 1))) to sPath
74231>>>>>            If (Left(sPath, 1) = ".") ;                Move (Replace(".", sPath, "")) to sPath
74234>>>>>            Get ObjectHandle hoMemb sPath to hoObj
74235>>>>>            Function_Return hoObj
74236>>>>>        End
74236>>>>>>
74236>>>>>        
74236>>>>>        Send Destroy of hoJson
74237>>>>>        Function_Return 0
74238>>>>>    End_Function
74239>>>>>    
74239>>>>>    Function JsonAtPath Handle hoJson String sPath Returns Handle
74241>>>>>        Handle  hoObj
74241>>>>>        UChar[] ucaJson
74242>>>>>        Boolean bOK
74242>>>>>        
74242>>>>>        If not hoJson ;            Function_Return 0
74245>>>>>        
74245>>>>>        If ((JsonType(hoJson) = jsonTypeArray) and (MemberCount(hoJson) = 0)) ;            Function_Return 0
74248>>>>>        
74248>>>>>        // Do this to "copy" hoJson to hoObj, so hoJson does not get destroyed
74248>>>>>        // in the process
74248>>>>>        Get StringifyUtf8 of hoJson to ucaJson
74249>>>>>        Get CreateNamed (RefClass(cJsonObject)) "CopyJson" to hoObj
74250>>>>>        Get ParseUtf8 of hoObj ucaJson to bOK
74251>>>>>        If (JsonType(hoObj) = jsonTypeArray) ;            Function_Return (ArrayHandle(Self, hoObj, sPath))
74254>>>>>        Else ;            Function_Return (ObjectHandle(Self, hoObj, sPath))
74256>>>>>    End_Function
74257>>>>>    
74257>>>>>    Function ValueAtPath Handle hoJson String sPath Returns String
74259>>>>>        Handle  hoObj
74259>>>>>        String  sVal
74259>>>>>        Integer iType
74259>>>>>        
74259>>>>>        Get JsonAtPath hoJson sPath to hoObj
74260>>>>>
74260>>>>>        If hoObj Begin
74262>>>>>            Get JsonType of hoObj to iType
74263>>>>>            
74263>>>>>            If ((iType <> jsonTypeObject) and ;                (iType <> jsonTypeArray) and ;                (iType <> jsonTypeNull)) ;                Move (JsonValue(hoObj)) to sVal
74266>>>>>            
74266>>>>>            Send Destroy of hoObj
74267>>>>>        End
74267>>>>>>
74267>>>>>        
74267>>>>>        Function_Return sVal
74268>>>>>    End_Function
74269>>>>>    
74269>>>>>    Function CountAtPath Handle hoJson String sPath Returns Integer
74271>>>>>        Integer iCount
74271>>>>>        
74271>>>>>        Get JsonAtPath hoJson sPath to hoJson
74272>>>>>        
74272>>>>>        If not hoJson ;            Function_Return 0
74275>>>>>        
74275>>>>>        If (JsonType(hoJson) = jsonTypeArray) ;            Get MemberCount of hoJson to iCount
74278>>>>>            
74278>>>>>        Send Destroy of hoJson
74279>>>>>        Function_Return iCount
74280>>>>>    End_Function
74281>>>>>
74281>>>>>End_Class
74282>>>
74282>>>Object oJsonPathObject is a cJsonPath
74284>>>End_Object
74285>>>
74285>>>Function JsonObjectAtPath Global Handle hoJson String sPath Returns Handle
74287>>>    Function_Return (JsonAtPath(oJsonPathObject, hoJson, sPath))
74288>>>End_Function
74289>>>
74289>>>Function JsonValueAtPath Global Handle hoJson String sPath Returns String
74291>>>    Function_Return (ValueAtPath(oJsonPathObject, hoJson, sPath))
74292>>>End_Function
74293>>>
74293>>>Function JsonCountAtPath Global Handle hoJson String sPath Returns Integer
74295>>>    Function_Return (CountAtPath(oJsonPathObject, hoJson, sPath))
74296>>>End_Function
74297>    
74297>    Object oClientArea is a ClientArea
74299>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files\DataFlex 23.0\Pkg\StdAbout.pkg)
74299>>>// This provides a quick and simple way to create an about package for a program.
74299>>>// You need to create a message inside you client area called Activate_About.
74299>>>// Within this message you should send the message DoAbout passing needed
74299>>>// string information.
74299>>>//
74299>>>//       Procedure Activate_About
74299>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
74299>>>//       End_Procedure
74299>>>//    where: sTitle =     Name of application. If none provided, uses caption
74299>>>//                        bar title
74299>>>//           sVersion   = Version Line. If none provided, will be blank
74299>>>//           sCopyRight = Copyright Line. If none provided, will be blank
74299>>>//           sAuthor    = Author name, blank if none provided
74299>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
74299>>>//                        is used.
74299>>>// It is expected that you will place this in your own object package. For
74299>>>// example an order about package may look like this:
74299>>>//
74299>>>//   // OrderAbout.pkg
74299>>>//   Use StdAbout.pkg
74299>>>//   Procedure Activate_About
74299>>>//      String sTitle sCopyright sVersion sAuthor
74299>>>//      Move "My Order Entry System" to sTitle
74299>>>//      Move "Version 2.1" to sVersion
74299>>>//      Move "Copyright xxxx, Super Software Inc." to sCopyright
74299>>>//      Move "John Smith"  to sAuthor
74299>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
74299>>>//   end_procedure
74299>>>//   // end of file.
74299>>>
74299>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfabout.pkg)
74299>>>>>Use LanguageText.pkg
74299>>>>>Use Windows.pkg
74299>>>>>Use DFbitmap.pkg
74299>>>>>Use GlobalFunctionsProcedures.pkg
74299>>>>>Use cTextEdit.pkg
74299>>>>>Use tWinStructs.pkg
74299>>>>>
74299>>>>>Use cli.pkg
74299>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 23.0\Pkg\DFBTRDRV.PKG)
74299>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
74299>>>>>>>// Notice      : This package contains constants and commands, used to call
74299>>>>>>>//               specific functions in the DFBTRDRV.
74299>>>>>>>Use Ui
74299>>>>>>>//
74299>>>>>>>// Driver Indentification
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>// Driver attributes
74299>>>>>>>//
74299>>>>>>>// Call_Driver functions ID's
74299>>>>>>>//
74299>>>>>>>//
74299>>>>>>>// DFBTRFN_CONVERT_FILE options
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// DFBTRFN_SET_OWNER options
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to create all vars which may be needed
74299>>>>>>>// in other commands.
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to set the owner of a Btrieve file.
74299>>>>>>>// File must have been opened.
74299>>>>>>>// Filenumber needs to be passed.
74299>>>>>>>// To clear set the owner to "".
74299>>>>>>>// Examples:
74299>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
74299>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
74299>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
74299>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
74299>>>>>>>// To clear:
74299>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to parse DFBTR_SET_OWNVER
74299>>>>>>>// options.
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to parse for Callback
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to clear the owner of a Btrieve file.
74299>>>>>>>// File must have been opened.
74299>>>>>>>// Filenumber needs to be passed.
74299>>>>>>>// Examples:
74299>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to add a owner name to the internal list of ownernames
74299>>>>>>>// which will be tries when opening files.
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to remove all owners from the internal list of ownernames
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to set the owner name to be used when opening the DDF files.
74299>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
74299>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
74299>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to change the transaction type.
74299>>>>>>>// Valid types are:
74299>>>>>>>//     DFBTRTT_NONE
74299>>>>>>>//     DFBTRTT_EXCLUSIVE
74299>>>>>>>//     DFBTRTT_CONCURRENT
74299>>>>>>>//
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to get the current transaction type.
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to set explicit_locking
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to get explicit locking
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>//
74299>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
74299>>>>>>>//
74299>>>>>>>
74299>>>>>>>// Purpose: An instance of this class can be used as a broker object to
74299>>>>>>>//          call several Dfbtrdrv releated methods.
74299>>>>>>>
74299>>>>>>>Class cDFBtrDrvHandler is an Array
74300>>>>>>>    
74300>>>>>>>    Procedure Construct_Object Integer iImage
74302>>>>>>>        Forward Send Construct_object iImage
74304>>>>>>>        
74304>>>>>>>        Property String  psDriverID "DFBTRDRV"
74305>>>>>>>    End_Procedure
74306>>>>>>>    
74306>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
74306>>>>>>>    //
74306>>>>>>>    
74306>>>>>>>    Function CKRevision Returns String
74308>>>>>>>        String  sDriverID
74308>>>>>>>        String  sRevision
74308>>>>>>>        String  sVoid
74308>>>>>>>        Integer iRetval
74308>>>>>>>        
74308>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74308>>>>>>>        // This error would otherwise be raised when we have an older
74308>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74308>>>>>>>        Send Ignore_error to Error_object_Id 20491
74309>>>>>>>        Get psDriverID to sDriverID
74310>>>>>>>        Move (Repeat(" ", 255)) to sRevision
74311>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
74316>>>>>>>        Send Trap_Error to Error_object_Id 20491
74317>>>>>>>        If (Trim(sRevision) = "") Begin
74319>>>>>>>            // Unable to get the revision. return all zeroes.
74319>>>>>>>            Move "0.0.0.0" to sRevision
74320>>>>>>>        End
74320>>>>>>>>
74320>>>>>>>        Function_Return sRevision
74321>>>>>>>    End_Function
74322>>>>>>>    
74322>>>>>>>    Function CkUsesUri Returns Integer
74324>>>>>>>        String  sDriverID
74324>>>>>>>        String  sVoid1
74324>>>>>>>        String  sVoid2
74324>>>>>>>        Integer iRetval
74324>>>>>>>        
74324>>>>>>>        Get psDriverID to sDriverID
74325>>>>>>>        
74325>>>>>>>        Move 0 to iRetval
74326>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74326>>>>>>>        // This error would otherwise be raised when we have an older
74326>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
74326>>>>>>>        Send Ignore_error to Error_object_Id 20491
74327>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
74332>>>>>>>        Send Trap_Error to Error_object_Id 20491
74333>>>>>>>        
74333>>>>>>>        Function_Return iRetval
74334>>>>>>>    End_Function
74335>>>>>>>    
74335>>>>>>>    
74335>>>>>>>    
74335>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
74335>>>>>>>    //
74335>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
74335>>>>>>>    //
74335>>>>>>>    
74335>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
74337>>>>>>>        Integer iPartRev
74337>>>>>>>        Integer iCurrentPart
74337>>>>>>>        Integer iSeparatorPos
74337>>>>>>>        
74337>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
74340>>>>>>>        
74340>>>>>>>        Move 0 to iCurrentPart
74341>>>>>>>        Repeat
74341>>>>>>>>
74341>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
74342>>>>>>>            If (iSeparatorPos > 0) Begin
74344>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
74345>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
74346>>>>>>>                Increment iCurrentPart
74347>>>>>>>            End
74347>>>>>>>>
74347>>>>>>>            Else If (sRevision <> "") Begin
74350>>>>>>>                Move sRevision to iPartRev
74351>>>>>>>                Move "" to sRevision
74352>>>>>>>                Increment iCurrentPart
74353>>>>>>>            End
74353>>>>>>>>
74353>>>>>>>            Else ;                Move -1 to iPartRev
74355>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
74357>>>>>>>        
74357>>>>>>>        Function_Return iPartRev
74358>>>>>>>    End_Function
74359>>>>>>>    
74359>>>>>>>    
74359>>>>>>>    
74359>>>>>>>    //
74359>>>>>>>    //  Returns the major revision of the CK
74359>>>>>>>    //
74359>>>>>>>    
74359>>>>>>>    Function CKMajorRevision Returns Integer
74361>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
74362>>>>>>>    End_Function
74363>>>>>>>    
74363>>>>>>>    
74363>>>>>>>    
74363>>>>>>>    //  Returns the minor revision of the CK
74363>>>>>>>    //
74363>>>>>>>    
74363>>>>>>>    Function CKMinorRevision Returns Integer
74365>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
74366>>>>>>>    End_Function
74367>>>>>>>    
74367>>>>>>>    
74367>>>>>>>    //  Returns the release revision of the CK
74367>>>>>>>    //
74367>>>>>>>    
74367>>>>>>>    Function CKReleaseRevision Returns Integer
74369>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
74370>>>>>>>    End_Function
74371>>>>>>>    
74371>>>>>>>    
74371>>>>>>>    //  Returns the major revision of the CK
74371>>>>>>>    //
74371>>>>>>>    
74371>>>>>>>    Function CKBuildRevision Returns Integer
74373>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
74374>>>>>>>    End_Function
74375>>>>>>>    
74375>>>>>>>    
74375>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
74375>>>>>>>    //
74375>>>>>>>    
74375>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
74377>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
74380>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
74383>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
74386>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
74389>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
74392>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
74396>>>>>>>            End
74396>>>>>>>>
74396>>>>>>>        End
74396>>>>>>>>
74396>>>>>>>        
74396>>>>>>>        Function_Return (False)
74397>>>>>>>    End_Function
74398>>>>>>>    
74398>>>>>>>    //   Functions to query the Pervasive.SQL version:
74398>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
74398>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
74398>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
74398>>>>>>>    //
74398>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
74398>>>>>>>    //   in the following format:
74398>>>>>>>    //       <version>.<revision>.<type>
74398>>>>>>>    //   possible values for <type>:
74398>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
74398>>>>>>>    //         server using Workgroup authentication mode
74398>>>>>>>    //       C for client cache engine
74398>>>>>>>    //       D for DOS workstation
74398>>>>>>>    //       N for client Requester
74398>>>>>>>    //       S for NetWare server
74398>>>>>>>    //       T for 32-bit Windows server engine
74398>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
74398>>>>>>>    //
74398>>>>>>>    //   example:
74398>>>>>>>    //       8.50.T
74398>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
74398>>>>>>>    //   32-bits Windows server.
74398>>>>>>>    //
74398>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
74398>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
74398>>>>>>>    //
74398>>>>>>>    //   If the version information is not available or can not be obtained
74398>>>>>>>    //   the functions will return "0.0.0"
74398>>>>>>>    
74398>>>>>>>    //  Returns the version information of the
74398>>>>>>>    //           Pervasive.SQL Client requester.
74398>>>>>>>    
74398>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
74400>>>>>>>        
74400>>>>>>>        String  sDriverID
74400>>>>>>>        String  sVersion
74400>>>>>>>        String  sVoid
74400>>>>>>>        Integer iRetval
74400>>>>>>>        
74400>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74400>>>>>>>        // This error would otherwise be raised when we have an older
74400>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74400>>>>>>>        Send Ignore_error to Error_object_Id 20491
74401>>>>>>>        Get psDriverID to sDriverID
74402>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74403>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74408>>>>>>>        Send Trap_Error to Error_object_Id 20491
74409>>>>>>>        If (Trim(sVersion) = "") Begin
74411>>>>>>>            // Unable to get the revision. return all zeroes.
74411>>>>>>>            Move "0.0.0" to sVersion
74412>>>>>>>        End
74412>>>>>>>>
74412>>>>>>>        Function_Return sVersion
74413>>>>>>>    End_Function
74414>>>>>>>    
74414>>>>>>>    //           Pervasive.SQL Engine
74414>>>>>>>    
74414>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
74416>>>>>>>        
74416>>>>>>>        String  sDriverID
74416>>>>>>>        String  sVersion
74416>>>>>>>        String  sVoid
74416>>>>>>>        Integer iRetval
74416>>>>>>>        
74416>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74416>>>>>>>        // This error would otherwise be raised when we have an older
74416>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74416>>>>>>>        Send Ignore_error to Error_object_Id 20491
74417>>>>>>>        Get psDriverID to sDriverID
74418>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74419>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74424>>>>>>>        Send Trap_Error to Error_object_Id 20491
74425>>>>>>>        If (Trim(sVersion) = "") Begin
74427>>>>>>>            // Unable to get the revision. return all zeroes.
74427>>>>>>>            Move "0.0.0" to sVersion
74428>>>>>>>        End
74428>>>>>>>>
74428>>>>>>>        Function_Return sVersion
74429>>>>>>>    End_Function
74430>>>>>>>    
74430>>>>>>>    //  Returns the version information of the
74430>>>>>>>    //           Pervasive.SQL Server Engine
74430>>>>>>>    
74430>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
74432>>>>>>>        
74432>>>>>>>        String  sDriverID
74432>>>>>>>        String  sVersion
74432>>>>>>>        String  sVoid
74432>>>>>>>        Integer iRetval
74432>>>>>>>        
74432>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74432>>>>>>>        // This error would otherwise be raised when we have an older
74432>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74432>>>>>>>        Send Ignore_error to Error_object_Id 20491
74433>>>>>>>        Get psDriverID to sDriverID
74434>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74435>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74440>>>>>>>        Send Trap_Error to Error_object_Id 20491
74441>>>>>>>        If (Trim(sVersion) = "") Begin
74443>>>>>>>            // Unable to get the revision. return all zeroes.
74443>>>>>>>            Move "0.0.0" to sVersion
74444>>>>>>>        End
74444>>>>>>>>
74444>>>>>>>        Function_Return sVersion
74445>>>>>>>    End_Function
74446>>>>>>>    
74446>>>>>>>End_Class
74447>>>>>>>
74447>>>>>>>
74447>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 23.0\Pkg\MSSqldrv.pkg)
74447>>>>>>>//     Package that declares MS SQL driver constants and functions.
74447>>>>>>>//     This package can be used by developers who want to add Data Access
74447>>>>>>>//     MS SQL Client specific code to a DataFlex application.
74447>>>>>>>
74447>>>>>>>Use Cli.pkg
74447>>>>>>>Use SQL.pkg
74447>>>>>>>
74447>>>>>>>//   Driver Indentification
74447>>>>>>>
74447>>>>>>>//   Error number constants
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>// SQL Server spcific types.
74447>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
74447>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
74447>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
74447>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
74447>>>>>>>
74447>>>>>>>// SQL Server spcific types.
74447>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
74447>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
74447>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
74447>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
74447>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
74447>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
74447>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
74447>>>>>>>//
74447>>>>>>>//     Setup a constraint for a file.
74447>>>>>>>
74447>>>>>>>
74447>>>>>>>Class cMSSQLHandler is a cCLIHandler
74448>>>>>>>    
74448>>>>>>>    Procedure Construct_Object
74450>>>>>>>        Forward Send Construct_Object
74452>>>>>>>        
74452>>>>>>>        Set psDriverID to MSSQLDRV_ID
74453>>>>>>>    End_Procedure
74454>>>>>>>    
74454>>>>>>>    
74454>>>>>>>    
74454>>>>>>>    //   Extract the list from the out connect string.
74454>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
74456>>>>>>>        String  sItem
74456>>>>>>>        Integer iStart
74456>>>>>>>        Integer iEnd
74456>>>>>>>        
74456>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
74459>>>>>>>        
74459>>>>>>>        Send Delete_Data to hoStore
74460>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
74461>>>>>>>        While (iStart > 0)
74465>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
74466>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
74469>>>>>>>            Else Begin
74470>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
74471>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
74472>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
74475>>>>>>>                
74475>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
74478>>>>>>>                
74478>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
74481>>>>>>>            End
74481>>>>>>>>
74481>>>>>>>        Loop
74482>>>>>>>>
74482>>>>>>>        
74482>>>>>>>        Function_Return (Item_Count(hoStore))
74483>>>>>>>    End_Procedure
74484>>>>>>>    
74484>>>>>>>    
74484>>>>>>>    
74484>>>>>>>    //   Call the driver's browse connect function
74484>>>>>>>    Function BrowseConnect String sInConnStr Returns String
74486>>>>>>>        String  sDriver
74486>>>>>>>        String  sOutConnStr
74486>>>>>>>        Integer iArg
74486>>>>>>>        Integer iRetval
74486>>>>>>>        
74486>>>>>>>        Get psDriverID to sDriver
74487>>>>>>>        If (sDriver <> "") Begin
74489>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
74490>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
74495>>>>>>>        End
74495>>>>>>>>
74495>>>>>>>        
74495>>>>>>>        Function_Return sOutConnStr
74496>>>>>>>    End_Function// BrowseConnect
74497>>>>>>>    
74497>>>>>>>    
74497>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
74499>>>>>>>        String  sDriver
74499>>>>>>>        String  sOutConnStr
74499>>>>>>>        Integer iArg
74499>>>>>>>        Integer iRetval
74499>>>>>>>        
74499>>>>>>>        Move 1 to iArg // Browses only local
74500>>>>>>>        
74500>>>>>>>        Get psDriverID to sDriver
74501>>>>>>>        If (sDriver <> "") Begin
74503>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
74504>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
74509>>>>>>>        End
74509>>>>>>>>
74509>>>>>>>        
74509>>>>>>>        Function_Return sOutConnStr
74510>>>>>>>    End_Function// BrowseConnect
74511>>>>>>>    
74511>>>>>>>    
74511>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
74513>>>>>>>        
74513>>>>>>>        String  sServerList
74513>>>>>>>        Integer iNumServers
74513>>>>>>>        Integer iDriver
74513>>>>>>>        Integer iClientVersion
74513>>>>>>>        String  sDriver
74513>>>>>>>        
74513>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
74514>>>>>>>        
74514>>>>>>>        If (iDriver) Begin
74516>>>>>>>            
74516>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
74519>>>>>>>            
74519>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
74520>>>>>>>            
74520>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
74521>>>>>>>            If (iNetworkLocal = 0) Begin
74523>>>>>>>                Get BrowseConnect sDriver to sServerList
74524>>>>>>>            End
74524>>>>>>>>
74524>>>>>>>            Else Begin
74525>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
74526>>>>>>>            End
74526>>>>>>>>
74526>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
74527>>>>>>>        End
74527>>>>>>>>
74527>>>>>>>        
74527>>>>>>>        Function_Return iNumServers
74528>>>>>>>        
74528>>>>>>>    End_Function
74529>>>>>>>    
74529>>>>>>>    //   Enumerate the available SQL Server database servers
74529>>>>>>>    //   This function will return all SQL Server instances on the network.
74529>>>>>>>    //   This may take a long time.
74529>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
74529>>>>>>>    Function EnumerateServers Returns Integer
74531>>>>>>>        
74531>>>>>>>        Integer iNumServers
74531>>>>>>>        Integer iNetworkLocal
74531>>>>>>>        
74531>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
74532>>>>>>>        
74532>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
74533>>>>>>>        
74533>>>>>>>        Function_Return iNumServers
74534>>>>>>>        
74534>>>>>>>    End_Function
74535>>>>>>>    
74535>>>>>>>    
74535>>>>>>>    //   Enumerate the available SQL Server database servers
74535>>>>>>>    //   This function will return only return SQL Server instance on the local machine
74535>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
74535>>>>>>>    Function EnumerateServersLocal Returns Integer
74537>>>>>>>        
74537>>>>>>>        Integer iNumServers
74537>>>>>>>        Integer iNetworkLocal
74537>>>>>>>        
74537>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
74538>>>>>>>        
74538>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
74539>>>>>>>        
74539>>>>>>>        Function_Return iNumServers
74540>>>>>>>        
74540>>>>>>>    End_Function
74541>>>>>>>    
74541>>>>>>>    
74541>>>>>>>    
74541>>>>>>>    //   Enumerate database in a given server.
74541>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
74543>>>>>>>        Integer hoSQL
74543>>>>>>>        String  sConnect
74543>>>>>>>        String  sDatabase
74543>>>>>>>        Integer hdbc
74543>>>>>>>        Integer hstmt
74543>>>>>>>        Integer iFetchResult
74543>>>>>>>        
74543>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
74546>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
74549>>>>>>>        
74549>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
74552>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
74554>>>>>>>        
74554>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
74556>>>>>>>            Move Current_Object to hoSQL
74557>>>>>>>        End_Object
74558>>>>>>>        
74558>>>>>>>        If (hoSQL <> 0) Begin
74560>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
74561>>>>>>>            If (hdbc <> 0) Begin
74563>>>>>>>                Get SQLOpen of hdbc to hstmt
74564>>>>>>>                If (hstmt <> 0) Begin
74566>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
74566>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
74566>>>>>>>                    //   approach in case meta data might change, the stored procedure will
74566>>>>>>>                    //   stay the same.
74566>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
74567>>>>>>>                    Send SQLCall to hstmt
74568>>>>>>>                    Repeat
74568>>>>>>>>
74568>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
74569>>>>>>>                        If (iFetchResult <> 0) Begin
74571>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
74572>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
74573>>>>>>>                        End
74573>>>>>>>>
74573>>>>>>>                    Until (iFetchResult = 0)
74575>>>>>>>                    
74575>>>>>>>                    Send SQLClose to hstmt
74576>>>>>>>                End
74576>>>>>>>>
74576>>>>>>>                Send SQLDisconnect to hdbc
74577>>>>>>>            End
74577>>>>>>>>
74577>>>>>>>        End
74577>>>>>>>>
74577>>>>>>>        Send Destroy_Object to hoSQL
74578>>>>>>>        
74578>>>>>>>        Function_Return (Item_Count(Current_Object))
74579>>>>>>>    End_Function
74580>>>>>>>    
74580>>>>>>>    
74580>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
74582>>>>>>>        
74582>>>>>>>        String  sSqlServerClientVersionName
74582>>>>>>>        
74582>>>>>>>        
74582>>>>>>>        Case Begin
74582>>>>>>>
74582>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
74584>>>>>>>                Move SQLSERVER2019CLIENTNAME to sSqlServerClientVersionName
74585>>>>>>>                Case Break
74586>>>>>>>            
74586>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
74589>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
74590>>>>>>>                Case Break
74591>>>>>>>                
74591>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
74594>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
74595>>>>>>>                Case Break
74596>>>>>>>            
74596>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
74599>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
74600>>>>>>>                Case Break
74601>>>>>>>            
74601>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
74604>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
74605>>>>>>>                Case Break
74606>>>>>>>            
74606>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
74609>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
74610>>>>>>>                Case Break
74611>>>>>>>            
74611>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
74614>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
74615>>>>>>>                Case Break
74616>>>>>>>            
74616>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
74619>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
74620>>>>>>>                Case Break
74621>>>>>>>            
74621>>>>>>>            Case Else
74621>>>>>>>                Move (SFormat("%1 (version %2) ",SQLSERVERUNKNOWNCLIENTNAME,iClientVersion)) to sSqlServerClientVersionName
74622>>>>>>>                
74622>>>>>>>        Case End
74622>>>>>>>        
74622>>>>>>>        
74622>>>>>>>        Function_Return sSqlServerClientVersionName
74623>>>>>>>        
74623>>>>>>>    End_Function
74624>>>>>>>
74624>>>>>>>
74624>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
74626>>>>>>>        
74626>>>>>>>        String  sSqlServerClientDriverName
74626>>>>>>>        
74626>>>>>>>        Case Begin
74626>>>>>>>
74626>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
74628>>>>>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
74629>>>>>>>                Case Break
74630>>>>>>>
74630>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
74633>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
74634>>>>>>>                Case Break
74635>>>>>>>                
74635>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
74638>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
74639>>>>>>>                Case Break
74640>>>>>>>            
74640>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
74643>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
74644>>>>>>>                Case Break
74645>>>>>>>            
74645>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
74648>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
74649>>>>>>>                Case Break
74650>>>>>>>            
74650>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
74653>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
74654>>>>>>>                Case Break
74655>>>>>>>            
74655>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
74658>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
74659>>>>>>>                Case Break
74660>>>>>>>            
74660>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
74663>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
74664>>>>>>>                Case Break
74665>>>>>>>            
74665>>>>>>>            Case Else
74665>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
74666>>>>>>>                
74666>>>>>>>        Case End
74666>>>>>>>        
74666>>>>>>>        
74666>>>>>>>        Function_Return sSqlServerClientDriverName
74667>>>>>>>        
74667>>>>>>>    End_Function
74668>>>>>>>    
74668>>>>>>>    
74668>>>>>>>End_Class
74669>>>>>>>
74669>>>>>>>
74669>>>>>
74669>>>>>Register_Function phoWorkspace Returns Handle
74669>>>>>Register_Function Help_filename Returns String
74669>>>>>Register_Function GetHelpFile Returns String
74669>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
74669>>>>>
74669>>>>>// Do not call directly, use the wrapper function instead
74669>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
74670>>>>>
74670>>>>>// Wrapper Function WNetGetUser
74670>>>>>Function WNetGetUser Global ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
74672>>>>>    
74672>>>>>    DWord   dwResult     
74672>>>>>    UWide   uwName uwUserName
74672>>>>>    UWide   uwName uwUserName
74672>>>>>        
74672>>>>>    Send StringToWide lpName (&uwName)
74673>>>>>    
74673>>>>>    Send WideSetBuffer lpUser_Name lpLength (&uwUserName)    
74674>>>>>    
74674>>>>>    Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
74675>>>>>    
74675>>>>>    Send WideToString (&uwUserName) lpUser_Name
74676>>>>>    
74676>>>>>    Function_Return dwResult
74677>>>>>End_Function
74678>>>>>
74678>>>>>//    This function reads the current username Of windows and returns that
74678>>>>>//    name or an text unknown user
74678>>>>>Function Network_User_Name for cDesktop Returns String
74680>>>>>    WString wName
74680>>>>>    Integer iRetval iLength
74680>>>>>    
74680>>>>>    Move 0 to iLength
74681>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
74682>>>>>    Move (ZeroString(iLength)) to wName
74683>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
74684>>>>>    
74684>>>>>    If (iRetval = NO_ERROR) Begin
74686>>>>>        Function_Return (CString (wName))
74687>>>>>    End
74687>>>>>>
74687>>>>>    
74687>>>>>    Function_Return "User Unknown"
74688>>>>>End_Function
74689>>>>>
74689>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
74690>>>>>
74690>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
74691>>>>>
74691>>>>>Class SysinfoDisplay is a cTextEdit
74692>>>>>    Procedure Construct_Object
74694>>>>>        Forward Send Construct_Object
74696>>>>>        
74696>>>>>        Set Location to 6 6
74697>>>>>        Set Size to 110 255
74698>>>>>        Set Read_Only_State to True
74699>>>>>        Set pbWrap to False
74700>>>>>    End_Procedure
74701>>>>>    
74701>>>>>    //    This method will show the name Of the current directory in the system
74701>>>>>    //    information box
74701>>>>>    Procedure Show_Current_Directory
74703>>>>>        String sDir
74703>>>>>        
74703>>>>>        Get_Current_Directory to sDir
74704>>>>>        
74704>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
74705>>>>>    End_Procedure
74706>>>>>    
74706>>>>>    Procedure Show_Windows_Directory
74708>>>>>        String sWindir
74708>>>>>        
74708>>>>>        Get_Windows_Directory to sWindir
74709>>>>>        
74709>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
74710>>>>>    End_Procedure
74711>>>>>    
74711>>>>>    Procedure Show_Current_User
74713>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
74714>>>>>    End_Procedure
74715>>>>>    
74715>>>>>    Procedure Show_Number_Format
74717>>>>>        Integer iFormat
74717>>>>>        String sFormatText
74717>>>>>        
74717>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
74720>>>>>        Move (Character (iFormat)) to sFormatText
74721>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
74722>>>>>        
74722>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
74725>>>>>        Move (Character (iFormat)) to sFormatText
74726>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
74727>>>>>    End_Procedure
74728>>>>>    
74728>>>>>    Procedure Show_Filelist_Name
74730>>>>>        String sFilename
74730>>>>>        
74730>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
74733>>>>>        
74733>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
74734>>>>>        Send AppendTextLn ""
74735>>>>>    End_Procedure
74736>>>>>    
74736>>>>>    Procedure Show_Lock_Delay
74738>>>>>        Integer iLockdelay
74738>>>>>        
74738>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
74741>>>>>        
74741>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
74742>>>>>    End_Procedure
74743>>>>>    
74743>>>>>    Procedure Show_Lock_Timeout
74745>>>>>        Integer iLockTimeout
74745>>>>>        
74745>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
74748>>>>>        
74748>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
74749>>>>>    End_Procedure
74750>>>>>    
74750>>>>>    Procedure Show_Screen_Size
74752>>>>>        Integer iYscreensize iXscreensize
74752>>>>>        
74752>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) to iXscreensize
74753>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) to iYscreensize
74754>>>>>        
74754>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
74755>>>>>    End_Procedure
74756>>>>>    
74756>>>>>    Procedure Show_Page_Size
74758>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
74759>>>>>    End_Procedure
74760>>>>>    
74760>>>>>    Procedure Show_Date
74762>>>>>        Date dToday
74762>>>>>        
74762>>>>>        Move (CurrentDateTime()) to  dToday
74763>>>>>        
74763>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
74764>>>>>    End_Procedure
74765>>>>>    
74765>>>>>    Procedure Show_Date_Format
74767>>>>>        Integer iDateFormat
74767>>>>>        String sDateFormat
74767>>>>>        
74767>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
74770>>>>>        Case Begin
74770>>>>>            Case (iDateFormat = DF_DATE_USA)
74772>>>>>                Move C_$USA to sDateFormat
74773>>>>>                Case Break
74774>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
74777>>>>>                Move C_$European to sDateFormat
74778>>>>>                Case Break
74779>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
74782>>>>>                Move C_$Military to sDateFormat
74783>>>>>                Case Break
74784>>>>>            Case Else
74784>>>>>                Move C_$UnknownDateType to sDateFormat
74785>>>>>                Case Break
74786>>>>>        Case End
74786>>>>>        
74786>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
74787>>>>>    End_Procedure
74788>>>>>    
74788>>>>>    Procedure Show_Systemresources
74790>>>>>        tWinMemoryStatusEx MemoryStatusInfo
74790>>>>>        tWinMemoryStatusEx MemoryStatusInfo
74790>>>>>        Integer iRetval
74790>>>>>        
74790>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
74791>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
74792>>>>>        If (iRetval = 0) Begin
74794>>>>>            Move (ShowLastError ()) to iRetval
74795>>>>>        End
74795>>>>>>
74795>>>>>        
74795>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
74796>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
74797>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Integer ( Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0)))
74798>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Integer ( Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0)))
74799>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Integer ( Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0)))
74800>>>>>    End_Procedure
74801>>>>>    
74801>>>>>    Procedure Show_Registration
74803>>>>>        String sRegName
74803>>>>>        Integer iSN iMaxUsers
74803>>>>>        
74803>>>>>        Registration sRegName iSN
74804>>>>>>
74804>>>>>        
74804>>>>>        Get_Licensed_Max_Users to iMaxUsers
74805>>>>>        
74805>>>>>        Send AppendTextLn ""
74806>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
74807>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
74808>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
74809>>>>>    End_Procedure
74810>>>>>    
74810>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
74810>>>>>    // To the workspace object passing the an object and message To send back
74810>>>>>    // To this object. It is expected that the workspace object will send this
74810>>>>>    // message for every line Of information it wants displayed (passing the
74810>>>>>    // information To be displayed
74810>>>>>    Register_Procedure EnumerateWorkspaceData Handle hObjId Handle hmMessId
74810>>>>>    
74810>>>>>    Procedure Show_ServicePack
74812>>>>>        String sKey sVersionDescription sVersion
74812>>>>>        Handle hoRegistry
74812>>>>>        Boolean bExists bOpened
74812>>>>>        
74812>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
74813>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
74814>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
74815>>>>>        
74815>>>>>        Move C_DFVersionRegistryRoot to sKey
74816>>>>>        Get KeyExists of hoRegistry sKey to bExists
74817>>>>>        If (bExists) Begin
74819>>>>>            Get OpenKey of hoRegistry sKey to bOpened
74820>>>>>            If (bOpened) Begin
74822>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
74823>>>>>                If (bExists) Begin
74825>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
74826>>>>>                End
74826>>>>>>
74826>>>>>                
74826>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
74827>>>>>                If (bExists) Begin
74829>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
74830>>>>>                End
74830>>>>>>
74830>>>>>                Send CloseKey of hoRegistry
74831>>>>>            End
74831>>>>>>
74831>>>>>        End
74831>>>>>>
74831>>>>>        Send Destroy of hoRegistry
74832>>>>>        
74832>>>>>        If (sVersionDescription <> "") Begin
74834>>>>>            Send AppendTextLn (sVersionDescription * "-" * sVersion)
74835>>>>>            Send AppendTextLn ""
74836>>>>>        End
74836>>>>>>
74836>>>>>    End_Procedure
74837>>>>>    
74837>>>>>    
74837>>>>>    Procedure Show_WorkspaceInformation
74839>>>>>        Integer hoWorkspace
74839>>>>>        
74839>>>>>        If (ghoApplication <> 0) Begin
74841>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
74842>>>>>            If (hoWorkspace <> 0) Begin
74844>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
74845>>>>>                Send AppendTextLn ""
74846>>>>>            End
74846>>>>>>
74846>>>>>        End
74846>>>>>>
74846>>>>>    End_Procedure
74847>>>>>    
74847>>>>>    // If connection ids are used, we will send the message EnumerateConnections
74847>>>>>    // to the connection manager object passing the an object and message to send
74847>>>>>    // back to this object. It is expected that the connection manager object will
74847>>>>>    // send this message for every line Of information it wants displayed (passing
74847>>>>>    // the information To be displayed
74847>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
74847>>>>>    
74847>>>>>    Procedure Show_ConnectionIdInformation
74849>>>>>        If (ghoConnection > 0) Begin
74851>>>>>            Send AppendTextLn ""
74852>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
74853>>>>>        End
74853>>>>>>
74853>>>>>    End_Procedure
74854>>>>>    
74854>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
74856>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
74857>>>>>    End_Function
74858>>>>>    
74858>>>>>    Procedure Show_Versions
74860>>>>>        Integer iVersion iRevision iBuild
74860>>>>>        
74860>>>>>        Version_Information iVersion iRevision iBuild
74862>>>>>        
74862>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
74863>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
74864>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
74865>>>>>    End_Procedure
74866>>>>>    
74866>>>>>    Procedure Show_Platform
74868>>>>>        Send AppendTextLn (SFormat (C_$Platform,"64-bit"))
74869>>>>>    End_Procedure
74870>>>>>    
74870>>>>>    Function CKRevisionNumber String sDriverID Returns String
74872>>>>>        Handle hoCLIHandler
74872>>>>>        Handle hoDFBtrDrvHandler
74872>>>>>        String sCKRevision
74872>>>>>        
74872>>>>>        
74872>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
74874>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
74875>>>>>            Set psDriverID of hoCLIHandler to sDriverID
74876>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
74877>>>>>            Send Destroy of hoCLIHandler
74878>>>>>        End
74878>>>>>>
74878>>>>>        Else Begin
74879>>>>>            If (sDriverID = "DFBTRDRV") Begin
74881>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
74882>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
74883>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
74884>>>>>                Send Destroy of hoDFBtrDrvHandler
74885>>>>>            End
74885>>>>>>
74885>>>>>        End
74885>>>>>>
74885>>>>>        
74885>>>>>        Function_Return sCKRevision
74886>>>>>    End_Function
74887>>>>>    
74887>>>>>    
74887>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
74889>>>>>        
74889>>>>>        If (sDriverID = "DATAFLEX") Begin
74891>>>>>            Function_Return False
74892>>>>>        End
74892>>>>>>
74892>>>>>        
74892>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
74893>>>>>    End_Function
74894>>>>>    
74894>>>>>    
74894>>>>>    Procedure Show_Drivers
74896>>>>>        String sCurrentDriver sRevNumber
74896>>>>>        String sLoadedDrivers sClientDriver
74896>>>>>        Integer iNumberOfDrivers iCount iClientVersion iMSSQLIndex
74896>>>>>        Boolean bOK
74896>>>>>        Handle hoMsqlDrv
74896>>>>>        
74896>>>>>        Move "" to sLoadedDrivers
74897>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
74900>>>>>        For iCount from 1 to iNumberOfDrivers
74906>>>>>>
74906>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
74909>>>>>            If (sLoadedDrivers <> "") Begin
74911>>>>>                Move (Append (sLoadedDrivers, ", ")) to sLoadedDrivers
74912>>>>>            End
74912>>>>>>
74912>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
74913>>>>>            If (bOK) Begin
74915>>>>>                If (sCurrentDriver = "MSSQLDRV") Begin
74917>>>>>                    Move iCount to iMSSQLIndex
74918>>>>>                End
74918>>>>>>
74918>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
74919>>>>>                // if mssqldrv, show the client number
74919>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
74920>>>>>            End
74920>>>>>>
74920>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) to sLoadedDrivers
74921>>>>>        Loop
74922>>>>>>
74922>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
74923>>>>>        If (iMSSQLIndex>0) Begin
74925>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iMSSQLIndex to iClientVersion
74928>>>>>            Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
74929>>>>>            Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
74930>>>>>            Send Destroy of hoMsqlDrv
74931>>>>>            Send AppendTextLn (SFormat("MSSQLDRV Client Version: %1", sClientDriver))
74932>>>>>        End
74932>>>>>>
74932>>>>>    End_Procedure
74933>>>>>    
74933>>>>>    Procedure Show_HelpFile
74935>>>>>        String sHelpFile
74935>>>>>        Integer eHelpType
74935>>>>>        
74935>>>>>        If (ghoApplication <> 0) Begin
74937>>>>>            Get peHelpType of ghoApplication to eHelpType
74938>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
74940>>>>>                Get GetHelpFile of ghoHtmlHelp to sHelpFile
74941>>>>>            End
74941>>>>>>
74941>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
74944>>>>>                Get Help_filename of Help_object_id to sHelpFile
74945>>>>>            End
74945>>>>>>
74945>>>>>            Else Begin
74946>>>>>                Move C_$ThereIsNoHelpfileDefined to sHelpFile
74947>>>>>            End
74947>>>>>>
74947>>>>>            
74947>>>>>            Send AppendTextLn ""
74948>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
74949>>>>>        End
74949>>>>>>
74949>>>>>    End_Procedure
74950>>>>>    
74950>>>>>    Procedure Show_EnterAsTab
74952>>>>>        Boolean bEnterKeyAsTabKey
74952>>>>>        String sText
74952>>>>>        
74952>>>>>        If (ghoApplication <> 0) Begin
74954>>>>>            Get pbEnterKeyAsTabKey of ghoApplication to bEnterKeyAsTabKey
74955>>>>>            If (bEnterKeyAsTabKey) Begin
74957>>>>>                Move "True" to sText
74958>>>>>            End
74958>>>>>>
74958>>>>>            Else Begin
74959>>>>>                Move "False" to sText
74960>>>>>            End
74960>>>>>>
74960>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
74961>>>>>        End
74961>>>>>>
74961>>>>>    End_Procedure
74962>>>>>    
74962>>>>>    //    During activation we will remove the old information and add the newly
74962>>>>>    //    found systeminformation
74962>>>>>    Procedure Add_Focus Integer hoRoot
74964>>>>>        Forward Send Add_Focus hoRoot
74966>>>>>        
74966>>>>>        Send Delete_Data
74967>>>>>        
74967>>>>>        Set Changed_State to False
74968>>>>>        Set Read_Only_State to True
74969>>>>>        
74969>>>>>        Send Show_ServicePack
74970>>>>>        Send Show_Versions
74971>>>>>        Send Show_Platform
74972>>>>>        Send Show_Drivers
74973>>>>>        If (ghoConnection <> 0) Begin
74975>>>>>            Send Show_ConnectionIdInformation
74976>>>>>        End
74976>>>>>>
74976>>>>>        Send Show_HelpFile
74977>>>>>        Send Show_Current_Directory
74978>>>>>        Send Show_Filelist_Name
74979>>>>>        If (ghoApplication <> 0) Begin
74981>>>>>            Send Show_WorkSpaceInformation // added To show WS info
74982>>>>>        End
74982>>>>>>
74982>>>>>        Send Show_Current_User
74983>>>>>        Send Show_Windows_Directory
74984>>>>>        Send Show_Screen_Size
74985>>>>>        Send Show_Page_Size
74986>>>>>        Send Show_EnterAsTab
74987>>>>>        Send Show_Number_Format
74988>>>>>        Send Show_Date_Format
74989>>>>>        Send Show_Lock_Delay
74990>>>>>        Send Show_Lock_Timeout
74991>>>>>        Send Show_Date
74992>>>>>        Send Show_Systemresources
74993>>>>>        Send Show_Registration
74994>>>>>        Send Beginning_of_Data
74995>>>>>        
74995>>>>>        Set Icon to 'default.ico'
74996>>>>>    End_Procedure
74997>>>>>End_Class
74998>>>>>
74998>>>>>Class SysInfoDialog is a ModalPanel
74999>>>>>    Procedure Construct_Object
75001>>>>>        Forward Send Construct_Object
75003>>>>>        
75003>>>>>        Set Label to C_$SystemInformation
75004>>>>>        Set Size to 140 267
75005>>>>>        Set piMinSize to 140 267
75006>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
75007>>>>>        Set Border_Style to Border_Thick
75008>>>>>        
75008>>>>>        Object oSysinfoDisplay is a SysInfoDisplay
75010>>>>>            Set peAnchors to anAll
75011>>>>>        End_Object
75012>>>>>        
75012>>>>>        Object oCloseButton is a Button
75014>>>>>            Set Label to C_$Close
75015>>>>>            Set Location to 120 210
75016>>>>>            Set Message 0 to (Refproc (Close_Panel))
75017>>>>>            Set Default_State to True
75018>>>>>            Set peAnchors to anBottomRight
75019>>>>>        End_Object
75020>>>>>        
75020>>>>>        On_Key kCancel Send Close_Panel
75021>>>>>    End_Procedure
75022>>>>>End_Class
75023>>>>>
75023>>>>>Class AboutDialog is a ModalPanel
75024>>>>>    Procedure Construct_Object
75026>>>>>        String sVdfRootDir
75026>>>>>        
75026>>>>>        Forward Send Construct_Object
75028>>>>>        
75028>>>>>        Set Label to C_$About
75029>>>>>        Set Size to 89 282
75030>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
75031>>>>>        
75031>>>>>        Object oSysInfoDialog is a SysInfoDialog
75033>>>>>        End_Object
75034>>>>>        
75034>>>>>        Object oBox is a Container3d
75036>>>>>            Set Border_Style to Border_StaticEdge
75037>>>>>            Set Size to 63 272
75038>>>>>            Set Location to 4 5
75039>>>>>            
75039>>>>>            Object oAboutGraphic is a BitmapContainer
75041>>>>>                Set Border_Style to Border_None
75042>>>>>                Set Bitmap_Style to Bitmap_Center
75043>>>>>                Set Size to 48 48
75044>>>>>                Set Location to 7 2
75045>>>>>            End_Object
75046>>>>>            
75046>>>>>            Object oProductName is a TextBox
75048>>>>>                Set Label to C_$ProductName
75049>>>>>                Set Size to 10 45
75050>>>>>                Set Location to 8 53
75051>>>>>            End_Object
75052>>>>>            
75052>>>>>            Object oVersion is a TextBox
75054>>>>>                Set Label to C_$Version
75055>>>>>                Set Size to 10 25
75056>>>>>                Set Location to 21 53
75057>>>>>            End_Object
75058>>>>>            
75058>>>>>            Object oCopyright is a TextBox
75060>>>>>                Set Label to C_$Copyright
75061>>>>>                Set Size to 10 31
75062>>>>>                Set Location to 34 53
75063>>>>>            End_Object
75064>>>>>            
75064>>>>>            Object oAuthor is a TextBox
75066>>>>>                Set Label to C_$Author
75067>>>>>                Set Size to 10 22
75068>>>>>                Set Location to 46 53
75069>>>>>            End_Object
75070>>>>>        End_Object
75071>>>>>        
75071>>>>>        Object oOKButton is a Button
75073>>>>>            On_Item C_$OK Send Close_Panel
75074>>>>>            Set Size to 14 50
75075>>>>>            Set Location to 71 227
75076>>>>>        End_Object
75077>>>>>        
75077>>>>>        Object oSysInfoButton is a Button
75079>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
75080>>>>>            Set Size to 14 50
75081>>>>>            Set Location to 71 171
75082>>>>>        End_Object
75083>>>>>        
75083>>>>>        On_Key Kcancel Send KeyAction of oOKButton
75084>>>>>        
75084>>>>>        Set Logo to "DacAbout.bmp"  // square bitmaps Of 42x42 work best
75085>>>>>    End_Procedure
75086>>>>>    
75086>>>>>    Procedure Set ProductName String sProductName
75088>>>>>        Set Label of oProductName to sProductName
75089>>>>>    End_Procedure
75090>>>>>    
75090>>>>>    Procedure Set Version String sVersion
75092>>>>>        Set Label of oVersion to sVersion
75093>>>>>    End_Procedure
75094>>>>>    
75094>>>>>    Procedure Set Copyright String sCopyright
75096>>>>>        Set Label of oCopyright to sCopyright
75097>>>>>    End_Procedure
75098>>>>>    
75098>>>>>    Procedure Set Author String sAuthor
75100>>>>>        Set Label of oAuthor to sAuthor
75101>>>>>    End_Procedure
75102>>>>>    
75102>>>>>    Procedure Set Logo String sLogo
75104>>>>>        // square bitmaps Of 42x42 work best
75104>>>>>        Set Bitmap of oAboutGraphic to sLogo
75105>>>>>    End_Procedure
75106>>>>>    
75106>>>>>    Procedure Show_Sysinfo
75108>>>>>        Send Popup_Modal of oSysinfoDialog
75109>>>>>    End_Procedure
75110>>>>>    
75110>>>>>    Procedure End_Construct_Object
75112>>>>>        Handle hoVersionInfo
75112>>>>>        Boolean bIncluded
75112>>>>>        Integer iMajor iMinor iRelease iBuild
75112>>>>>        String sLabel
75112>>>>>        
75112>>>>>        Get Label of oVersion to sLabel
75113>>>>>        If (sLabel = C_$VERSION) Begin
75115>>>>>            // set it To the version info Of the program, if available
75115>>>>>            If (ghoApplication <> 0) Begin
75117>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
75118>>>>>                If (hoVersionInfo <> 0) Begin
75120>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
75121>>>>>                    If (bIncluded) Begin
75123>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
75124>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
75125>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
75126>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
75127>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
75128>>>>>                        Set Version to sLabel
75129>>>>>                    End
75129>>>>>>
75129>>>>>                End
75129>>>>>>
75129>>>>>            End
75129>>>>>>
75129>>>>>        End
75129>>>>>>
75129>>>>>        
75129>>>>>        Forward Send End_Construct_Object
75131>>>>>    End_Procedure
75132>>>>>End_Class
75133>>>
75133>>>//  This is the default message. It is expected that you will
75133>>>//  create your own message to override this
75133>>>Procedure Activate_About
75136>>>    Send DoAbout "" "" "" "" ""
75137>>>End_Procedure
75138>>>
75138>>>//  It is expected that you will send this message (most
75138>>>//  likely from Activate_About. This creates an about object, activates it
75138>>>//  and destroys it when done. It is not exepected that you will augment this.
75138>>>Procedure DoAbout String sTitle String sVersion String sCopyRight String sAuthor String sBitmap
75141>>>    Integer hoObj hoMain
75141>>>    
75141>>>    // create object
75141>>>    Object About is an AboutDialog
75143>>>        // if no title passed use the label of the main panel
75143>>>        // (if a main panel exists).
75143>>>        If (sTitle = "") Begin
75145>>>            Get Main_Window of desktop to hoMain
75146>>>            If hoMain ;                Get Label of hoMain to sTitle
75149>>>        End
75149>>>>
75149>>>        Set productname to sTitle
75150>>>        Set version     to sVersion
75151>>>        Set copyright   to sCopyRight
75152>>>        Set author      to sAuthor
75153>>>        If (sBitmap <> '') ;            Set logo to sBitMap // square bitmaps of 42x42 work best
75156>>>        Move Self to hoObj // object Id
75157>>>    End_Object
75158>>>    Send Popup   of hoObj    // popup the about object
75159>>>    Send Destroy of hoObj // when done, it will be destroyed
75160>>>End_Procedure
75161>>>
75161>        Use ChatGPTTest.vw
Including file: ChatGPTTest.vw    (C:\Projects\ChatGPTAPI\AppSrc\ChatGPTTest.vw)
75161>>>Use Windows.pkg
75161>>>Use DFClient.pkg
75161>>>Use cTextEdit.pkg
75161>>>Use cJsonObject.pkg
75161>>>Use cCJGrid.pkg
75161>>>Use cCJGridColumnRowIndicator.pkg
Including file: cCJGridColumnRowIndicator.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJGridColumnRowIndicator.pkg)
75161>>>>>Use cCJGridColumn.pkg
75161>>>>>
75161>>>>>Class cCJGridColumnRowIndicator is a cCJGridColumn
75162>>>>>    
75162>>>>>    Procedure Construct_Object
75164>>>>>        Forward Send Construct_Object
75166>>>>>        
75166>>>>>        Property Integer piImage 0
75167>>>>>        
75167>>>>>        Set psCaption to ""
75168>>>>>        Set piWidth to 20
75169>>>>>        Set pbResizable to False
75170>>>>>        Set pbEditable to False
75171>>>>>        Set pbFocusable to False
75172>>>>>        Set pbAllowDrag to False
75173>>>>>        Set psToolTip to "Row Indicator"
75174>>>>>    End_Procedure
75175>>>>>    
75175>>>>>    Procedure OnCreateColumn
75177>>>>>        Integer iImage
75177>>>>>        Delegate Get AddImage "GridColumnRowIndicator.bmp" 0 to iImage
75179>>>>>        Set piImage to iImage
75180>>>>>    End_Procedure
75181>>>>>    
75181>>>>>    Procedure OnSetDisplayMetrics Handle hoGridItemMetrics Integer iRow String ByRef sValue
75183>>>>>        Integer iImage iFocusedRow
75183>>>>>        Handle hoDataSource
75183>>>>>        
75183>>>>>        Get phoDataSource to hoDataSource
75184>>>>>        Get SelectedRow of hoDataSource to iFocusedRow
75185>>>>>        Move -1 to iImage
75186>>>>>        If (iRow = iFocusedRow) Begin
75188>>>>>            Get piImage to iImage
75189>>>>>            Set ComItemIcon of hoGridItemMetrics to iImage
75190>>>>>        End
75190>>>>>>
75190>>>>>    End_Procedure
75191>>>>>    
75191>>>>>End_Class
75192>>>Use cCJGridColumn.pkg
75192>>>Use cChatGPTAPI.pkg
Including file: cChatGPTAPI.pkg    (C:\Projects\ChatGPTAPI\AppSrc\cChatGPTAPI.pkg)
75192>>>>>Use UI
75192>>>>>Use cHttpTransferREST.pkg
75192>>>>>Use JsonPath.pkg
75192>>>>>
75192>>>>>Class cChatGPTAPI is a cObject
75193>>>>>    
75193>>>>>    Procedure Construct_Object
75195>>>>>        Forward Send Construct_Object
75197>>>>>    
75197>>>>>        Property String   psChatGPTBasePath "v1/"
75198>>>>>        
75198>>>>>        Object oHttp is a cHttpTransferREST
75200>>>>>            Set psRemoteHost    to "api.openai.com"
75201>>>>>            Set piRemotePort    to rpHttpSSL
75202>>>>>            Set peTransferFlags to ifSecure
75203>>>>>            Set pbDefeatCaching to False
75204>>>>>        End_Object
75205>>>>>        
75205>>>>>    End_Procedure
75206>>>>>    
75206>>>>>    Function AvailableModels Returns String[]
75208>>>>>        Handle   hoMods hoData
75208>>>>>        Integer  i iMax
75208>>>>>        String[] asModels
75209>>>>>        
75209>>>>>        Get MakeJsonCall of oHttp "GET" (psChatGPTBasePath(Self) + "models") "" 0 to hoMods
75210>>>>>            
75210>>>>>        If hoMods Begin
75212>>>>>                
75212>>>>>                If (HasMember(hoMods, "data")) Begin
75214>>>>>                    Get Member of hoMods "data" to hoData
75215>>>>>                    Get MemberCount of hoData to iMax
75216>>>>>                    Decrement iMax
75217>>>>>                    
75217>>>>>                    For i from 0 to iMax
75223>>>>>>
75223>>>>>                        Move (JsonValueAtPath(hoData, "[" + String(i) + "]id")) to asModels[i]
75224>>>>>                    Loop
75225>>>>>>
75225>>>>>                    
75225>>>>>                    Send Destroy of hoData
75226>>>>>                End
75226>>>>>>
75226>>>>>                
75226>>>>>                Send Destroy of hoMods
75227>>>>>            End
75227>>>>>>
75227>>>>>            
75227>>>>>            Function_Return asModels
75228>>>>>    End_Function
75229>>>>>    
75229>>>>>    Function Ask String sQuestion String sModel Returns String
75231>>>>>        Handle  hoBody hoMsg hoMsgs hoResp
75231>>>>>        String  sResp sMod
75231>>>>>        
75231>>>>>        Get Create (RefClass(cJsonObject)) to hoMsg
75232>>>>>        Send InitializeJsonType of hoMsg jsonTypeObject
75233>>>>>        Send SetMemberValue of hoMsg "role" jsonTypeString "user"
75234>>>>>        Send SetMemberValue of hoMsg "content" jsonTypeString (Trim(sQuestion))
75235>>>>>        
75235>>>>>        Get Create (RefClass(cJsonObject)) to hoMsgs
75236>>>>>        Send InitializeJsonType of hoMsgs jsonTypeArray
75237>>>>>        Send AddMember of hoMsgs hoMsg
75238>>>>>        Send Destroy of hoMsg
75239>>>>>        
75239>>>>>        Get Create (RefClass(cJsonObject)) to hoBody
75240>>>>>        Send InitializeJsonType of hoBody jsonTypeObject
75241>>>>>        Send SetMemberValue of hoBody "model" jsonTypeString (Trim(sModel))
75242>>>>>        Send SetMember of hoBody "messages" hoMsgs
75243>>>>>        Send Destroy of hoMsgs
75244>>>>>        
75244>>>>>        Get MakeJsonCall of oHttp "POST" (psChatGPTBasePath(Self) + "chat/completions") "" hoBody to hoResp
75245>>>>>        
75245>>>>>        If hoResp Begin
75247>>>>>            Move (JsonValueAtPath(hoResp, "choices[0].message.content")) to sResp
75248>>>>>            Send Destroy of hoResp
75249>>>>>        End
75249>>>>>>
75249>>>>>        
75249>>>>>        Function_Return sResp
75250>>>>>    End_Function
75251>>>>>
75251>>>>>End_Class
75252>>>
75252>>>Deferred_View Activate_oChatGPTTest for ;Object oChatGPTTest is a dbView
75277>>>    
75277>>>    Property String   psChatGPTBasePath "v1/"
75279>>>    
75279>>>    Property String[] pasSpeakers
75281>>>    Property String[] pasMessages
75283>>>    Property String[] pasTimes
75285>>>    
75285>>>    Set Border_Style to Border_Thick
75286>>>    Set Size to 340 628
75287>>>    Set Location to 2 2
75288>>>    Set Label to "ChatGPT Test View"
75289>>>    
75289>>>    Object oChatGPT is a cChatGPTAPI
75291>>>    End_Object
75292>>>    
75292>>>    Procedure AddToHistory String sSpeaker String sMsg
75295>>>        String[]   asSpeakers asMsgs asTimes
75298>>>        
75298>>>        Get pasSpeakers to asSpeakers
75299>>>        Get pasMessages to asMsgs
75300>>>        Get pasTimes    to asTimes
75301>>>        
75301>>>        Move sSpeaker               to asSpeakers[-1]
75302>>>        Move sMsg                   to asMsgs[-1]
75303>>>        Move (CurrentDateTime())    to asTimes[-1]
75304>>>        
75304>>>        Set pasSpeakers to asSpeakers
75305>>>        Set pasMessages to asMsgs
75306>>>        Set pasTimes    to asTimes
75307>>>        
75307>>>        Send ReloadHist of oHistory
75308>>>    End_Procedure
75309>>>    
75309>>>    Procedure AskChatGPT
75312>>>        String sAsk sResp sModel
75312>>>        
75312>>>        Send Cursor_Wait of oCursor
75313>>>        Get Value of oAsk       to sAsk
75314>>>        Get Value of oModels    to sModel
75315>>>        
75315>>>        Send AddToHistory "You" sAsk
75316>>>        
75316>>>        Get Ask of oChatGPT sAsk sModel to sResp
75317>>>        
75317>>>        If (sResp <> "") Begin
75319>>>            Set Value of oResponse to sResp
75320>>>            Send AddToHistory "ChatGPT" sResp
75321>>>        End
75321>>>>
75321>>>        Else Begin
75322>>>            Send AddToHistory "ChatGPT" "No response received"
75323>>>            Send Info_Box ("ChatGPT did not respond - there was probably a timeout. 🙁" + ;                           "\nPerhaps just try sending your question again") "ChatGPT Error"
75324>>>        End
75324>>>>
75324>>>        
75324>>>        Send Cursor_Ready of oCursor
75325>>>    End_Procedure
75326>>>    
75326>>>    Object oModels is a ComboForm
75328>>>        Set Size to 12 100
75329>>>        Set Location to 4 521
75330>>>        Set Label to "ChatGPT Model to use:"
75331>>>        Set Label_Justification_Mode to JMode_Right
75332>>>        Set Label_Col_Offset to 5
75333>>>        Set peAnchors to anTopRight
75334>>>    
75334>>>        Procedure Combo_Fill_List
75337>>>            Integer  i iMax
75337>>>            String[] asMods
75338>>>            
75338>>>            Get AvailableModels of oChatGPT to asMods
75339>>>            Move (SizeOfArray(asMods) - 1)  to iMax
75340>>>            
75340>>>            For i from 0 to iMax
75346>>>>
75346>>>                Send Combo_Add_Item asMods[i]
75347>>>            Loop
75348>>>>
75348>>>            
75348>>>            Set Value to "gpt-3.5-turbo"
75349>>>        End_Procedure
75350>>>      
75350>>>    End_Object
75351>>>
75351>>>    Object oAsk is a cTextEdit
75353>>>        Set Size to 36 554
75354>>>        Set Location to 28 10
75355>>>        Set Label to "Ask ChatGPT something:"
75356>>>        Set peAnchors to anTopLeftRight
75357>>>    End_Object
75358>>>
75358>>>    Object oSendBtn is a Button
75360>>>        Set Location to 28 571
75361>>>        Set Label to "Send"
75362>>>        Set peAnchors to anTopRight
75363>>>    
75363>>>        Procedure OnClick
75366>>>            Send AskChatGPT
75367>>>        End_Procedure
75368>>>    
75368>>>    End_Object
75369>>>
75369>>>    Object oClearBtn is a Button
75371>>>        Set Location to 46 571
75372>>>        Set Label to "Clear"
75373>>>        Set peAnchors to anTopRight
75374>>>    
75374>>>        Procedure OnClick
75377>>>            Set Value of oAsk to ""
75378>>>        End_Procedure
75379>>>    
75379>>>    End_Object
75380>>>
75380>>>    Object oResponse is a cTextEdit
75382>>>        Set Size to 128 610
75383>>>        Set Location to 77 10
75384>>>        Set Label to "ChatGPT replied:"
75385>>>        Set peAnchors to anAll
75386>>>    End_Object
75387>>>
75387>>>    Object oHistText is a TextBox
75389>>>        Set Size to 9 25
75390>>>        Set Location to 210 10
75391>>>        Set Label to "History:"
75392>>>        Set peAnchors to anBottomLeft
75393>>>    End_Object
75394>>>
75394>>>    Object oHistory is a cCJGrid
75396>>>        Set Size to 65 611
75397>>>        Set Location to 220 10
75398>>>        Set peAnchors to anBottomLeftRight
75399>>>        Set pbReadOnly to True
75400>>>
75400>>>        Object oCJGridColumnRowIndicator1 is a cCJGridColumnRowIndicator
75402>>>        End_Object
75403>>>
75403>>>        Object oDateTime is a cCJGridColumn
75405>>>            Set piWidth to 50
75406>>>            Set psCaption to "Time"
75407>>>        End_Object
75408>>>        
75408>>>        Object oSpeaker is a cCJGridColumn
75410>>>            Set piWidth to 20
75411>>>            Set psCaption to "Speaker"
75412>>>        End_Object
75413>>>
75413>>>        Object oMessage is a cCJGridColumn
75415>>>            Set piWidth to 350
75416>>>            Set psCaption to "Message"
75417>>>        End_Object
75418>>>
75418>>>        Procedure ReloadHist
75421>>>            tDataSourceRow[] atRows
75421>>>            tDataSourceRow[] atRows
75422>>>            Integer    iSpkCol iMsgCol iTimeCol i iMax
75422>>>            String[]   asSpeakers asMsgs asTimes
75425>>>            
75425>>>            Get pasSpeakers to asSpeakers
75426>>>            Get pasMessages to asMsgs
75427>>>            Get pasTimes    to asTimes
75428>>>            
75428>>>            Get piColumnID of oSpeaker  to iSpkCol
75429>>>            Get piColumnID of oMessage  to iMsgCol
75430>>>            Get piColumnID of oDateTime to iTimeCol
75431>>>            
75431>>>            Move (SizeOfArray(asSpeakers) - 1) to iMax
75432>>>            
75432>>>            For i from 0 to iMax
75438>>>>
75438>>>                Move asTimes[iMax - i]    to atRows[i].sValue[iTimeCol]
75439>>>                Move asSpeakers[iMax - i] to atRows[i].sValue[iSpkCol]
75440>>>                Move asMsgs[iMax - i]     to atRows[i].sValue[iMsgCol]
75441>>>            Loop
75442>>>>
75442>>>            
75442>>>            Send InitializeData atRows
75443>>>            Send MoveToFirstRow    
75444>>>        End_Procedure
75445>>>        
75445>>>        Procedure OnRowChanged Integer iOldRow Integer iNewSelectedRow
75448>>>            String[] asSpeakers asMsgs asTimes
75451>>>            Integer  iMax i
75451>>>            
75451>>>            Get pasSpeakers to asSpeakers
75452>>>            Get pasMessages to asMsgs
75453>>>            Get pasTimes    to asTimes
75454>>>            Move (SizeOfArray(asSpeakers) - 1) to iMax
75455>>>            Move (iMax - iNewSelectedRow) to i
75456>>>            
75456>>>            Set Value of oMsgContent to (Trim(asSpeakers[i]) * ;                                        "(at" * Trim(asTimes[i] + "):" * ;                                        Trim(asMsgs[i])))
75457>>>        End_Procedure
75458>>>        
75458>>>    End_Object
75459>>>
75459>>>    Object oMsgText is a TextBox
75461>>>        Set Size to 9 29
75462>>>        Set Location to 287 10
75463>>>        Set Label to "Message:"
75464>>>        Set peAnchors to anBottomLeft
75465>>>    End_Object
75466>>>
75466>>>    Object oMsgContent is a cTextEdit
75468>>>        Set Size to 40 611
75469>>>        Set Location to 297 10
75470>>>        Set peAnchors to anBottomLeftRight
75471>>>    End_Object
75472>>>
75472>>>Cd_End_Object
75474>>>>
75474>
75474>        Procedure Activate_About
75477>            Send DoAbout "" "" "" "" ""
75478>        End_Procedure
75479>
75479>    End_Object
75480>
75480>End_Object
75481>
75481>Send Activate_oChatGPTTest of (oClientArea(oMain))
75482>Start_UI
75483>
Summary
Memory Available: 11534372864
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 43464
Total Resources: 0
Total Commands : 75482
Total Windows  : 0
Total Pages    : 0
Static Data    : 544587
Message area   : 521574
Total Blocks   : 28357
